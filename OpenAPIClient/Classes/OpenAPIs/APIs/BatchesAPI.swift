//
// BatchesAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(Combine)
import Combine
#endif
#if canImport(AnyCodable)
import AnyCodable
#endif

open class BatchesAPI {

    /**

     - parameter id: (path)  
     - parameter addOrderItemViewModel: (body)  
     - returns: AnyPublisher<BatchViewModel, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func batchesAddOrderItem(id: Int64, addOrderItemViewModel: AddOrderItemViewModel) -> AnyPublisher<BatchViewModel, Error> {
        let requestBuilder = batchesAddOrderItemWithRequestBuilder(id: id, addOrderItemViewModel: addOrderItemViewModel)
        let requestTask = requestBuilder.requestTask
        return Future<BatchViewModel, Error> { promise in
            requestBuilder.execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     - POST /api/batches/{id}/add
     - BASIC:
       - type: http
       - name: Bearer
     - parameter id: (path)  
     - parameter addOrderItemViewModel: (body)  
     - returns: RequestBuilder<BatchViewModel> 
     */
    open class func batchesAddOrderItemWithRequestBuilder(id: Int64, addOrderItemViewModel: AddOrderItemViewModel) -> RequestBuilder<BatchViewModel> {
        var localVariablePath = "/api/batches/{id}/add"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: addOrderItemViewModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BatchViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path)  
     - returns: AnyPublisher<URL, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func batchesDelete(id: Int) -> AnyPublisher<URL, Error> {
        let requestBuilder = batchesDeleteWithRequestBuilder(id: id)
        let requestTask = requestBuilder.requestTask
        return Future<URL, Error> { promise in
            requestBuilder.execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     - DELETE /api/batches/{id}
     - BASIC:
       - type: http
       - name: Bearer
     - parameter id: (path)  
     - returns: RequestBuilder<URL> 
     */
    open class func batchesDeleteWithRequestBuilder(id: Int) -> RequestBuilder<URL> {
        var localVariablePath = "/api/batches/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<URL>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter batchId: (path)  
     - parameter id: (path)  
     - returns: AnyPublisher<BatchViewModel, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func batchesDeleteOrderItem(batchId: Int64, id: Int64) -> AnyPublisher<BatchViewModel, Error> {
        let requestBuilder = batchesDeleteOrderItemWithRequestBuilder(batchId: batchId, id: id)
        let requestTask = requestBuilder.requestTask
        return Future<BatchViewModel, Error> { promise in
            requestBuilder.execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     - DELETE /api/batches/{batchId}/items/{id}
     - BASIC:
       - type: http
       - name: Bearer
     - parameter batchId: (path)  
     - parameter id: (path)  
     - returns: RequestBuilder<BatchViewModel> 
     */
    open class func batchesDeleteOrderItemWithRequestBuilder(batchId: Int64, id: Int64) -> RequestBuilder<BatchViewModel> {
        var localVariablePath = "/api/batches/{batchId}/items/{id}"
        let batchIdPreEscape = "\(APIHelper.mapValueToPathItem(batchId))"
        let batchIdPostEscape = batchIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{batchId}", with: batchIdPostEscape, options: .literal, range: nil)
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BatchViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Search Batches using available filters.
     
     - parameter status: (query)  (optional)
     - parameter page: (query)  (optional)
     - parameter pageSize: (query)  (optional)
     - parameter orderBy: (query)  (optional)
     - parameter advancedSearchFields: (query)  (optional)
     - parameter advancedSearchKeyword: (query)  (optional)
     - parameter keyword: (query)  (optional)
     - parameter advancedFilterLogic: (query)  (optional)
     - parameter advancedFilterFilters: (query)  (optional)
     - parameter advancedFilterField: (query)  (optional)
     - parameter advancedFilterOperator: (query)  (optional)
     - parameter advancedFilterValue: (query)  (optional)
     - returns: AnyPublisher<PaginationResponseOfBatchListDto, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func batchesGet(status: Int64? = nil, page: Int? = nil, pageSize: Int? = nil, orderBy: [String]? = nil, advancedSearchFields: [String]? = nil, advancedSearchKeyword: String? = nil, keyword: String? = nil, advancedFilterLogic: String? = nil, advancedFilterFilters: [Filter]? = nil, advancedFilterField: String? = nil, advancedFilterOperator: String? = nil, advancedFilterValue: AnyCodable? = nil) -> AnyPublisher<PaginationResponseOfBatchListDto, Error> {
        let requestBuilder = batchesGetWithRequestBuilder(status: status, page: page, pageSize: pageSize, orderBy: orderBy, advancedSearchFields: advancedSearchFields, advancedSearchKeyword: advancedSearchKeyword, keyword: keyword, advancedFilterLogic: advancedFilterLogic, advancedFilterFilters: advancedFilterFilters, advancedFilterField: advancedFilterField, advancedFilterOperator: advancedFilterOperator, advancedFilterValue: advancedFilterValue)
        let requestTask = requestBuilder.requestTask
        return Future<PaginationResponseOfBatchListDto, Error> { promise in
            requestBuilder.execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Search Batches using available filters.
     - GET /api/batches
     - BASIC:
       - type: http
       - name: Bearer
     - parameter status: (query)  (optional)
     - parameter page: (query)  (optional)
     - parameter pageSize: (query)  (optional)
     - parameter orderBy: (query)  (optional)
     - parameter advancedSearchFields: (query)  (optional)
     - parameter advancedSearchKeyword: (query)  (optional)
     - parameter keyword: (query)  (optional)
     - parameter advancedFilterLogic: (query)  (optional)
     - parameter advancedFilterFilters: (query)  (optional)
     - parameter advancedFilterField: (query)  (optional)
     - parameter advancedFilterOperator: (query)  (optional)
     - parameter advancedFilterValue: (query)  (optional)
     - returns: RequestBuilder<PaginationResponseOfBatchListDto> 
     */
    open class func batchesGetWithRequestBuilder(status: Int64? = nil, page: Int? = nil, pageSize: Int? = nil, orderBy: [String]? = nil, advancedSearchFields: [String]? = nil, advancedSearchKeyword: String? = nil, keyword: String? = nil, advancedFilterLogic: String? = nil, advancedFilterFilters: [Filter]? = nil, advancedFilterField: String? = nil, advancedFilterOperator: String? = nil, advancedFilterValue: AnyCodable? = nil) -> RequestBuilder<PaginationResponseOfBatchListDto> {
        let localVariablePath = "/api/batches"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "Status": (wrappedValue: status?.encodeToJSON(), isExplode: true),
            "Page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "PageSize": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "OrderBy": (wrappedValue: orderBy?.encodeToJSON(), isExplode: true),
//            "AdvancedSearch.Fields": (wrappedValue: advancedSearchFields?.encodeToJSON(), isExplode: true),
//            "AdvancedSearch.Keyword": (wrappedValue: advancedSearchKeyword?.encodeToJSON(), isExplode: true),
//            "Keyword": (wrappedValue: keyword?.encodeToJSON(), isExplode: true),
//            "AdvancedFilter.Logic": (wrappedValue: advancedFilterLogic?.encodeToJSON(), isExplode: true),
//            "AdvancedFilter.Filters": (wrappedValue: advancedFilterFilters?.encodeToJSON(), isExplode: true),
//            "AdvancedFilter.Field": (wrappedValue: advancedFilterField?.encodeToJSON(), isExplode: true),
//            "AdvancedFilter.Operator": (wrappedValue: advancedFilterOperator?.encodeToJSON(), isExplode: true),
//            "AdvancedFilter.Value": (wrappedValue: advancedFilterValue?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginationResponseOfBatchListDto>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path)  
     - returns: AnyPublisher<BatchViewModel, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func batchesGet2(id: Int64) -> AnyPublisher<BatchViewModel, Error> {
        let requestBuilder = batchesGet2WithRequestBuilder(id: id)
        let requestTask = requestBuilder.requestTask
        return Future<BatchViewModel, Error> { promise in
            requestBuilder.execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     - GET /api/batches/{id}
     - BASIC:
       - type: http
       - name: Bearer
     - parameter id: (path)  
     - returns: RequestBuilder<BatchViewModel> 
     */
    open class func batchesGet2WithRequestBuilder(id: Int64) -> RequestBuilder<BatchViewModel> {
        var localVariablePath = "/api/batches/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BatchViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path)  
     - returns: AnyPublisher<BatchViewModel, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func batchesGetHeader(id: Int64) -> AnyPublisher<BatchViewModel, Error> {
        let requestBuilder = batchesGetHeaderWithRequestBuilder(id: id)
        let requestTask = requestBuilder.requestTask
        return Future<BatchViewModel, Error> { promise in
            requestBuilder.execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     - GET /api/batches/{id}/header
     - BASIC:
       - type: http
       - name: Bearer
     - parameter id: (path)  
     - returns: RequestBuilder<BatchViewModel> 
     */
    open class func batchesGetHeaderWithRequestBuilder(id: Int64) -> RequestBuilder<BatchViewModel> {
        var localVariablePath = "/api/batches/{id}/header"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BatchViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path)  
     - returns: AnyPublisher<URL, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func batchesGetPdf(id: Int64) -> AnyPublisher<URL, Error> {
        let requestBuilder = batchesGetPdfWithRequestBuilder(id: id)
        let requestTask = requestBuilder.requestTask
        return Future<URL, Error> { promise in
            requestBuilder.execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     - GET /api/batches/{id}/pdf
     - BASIC:
       - type: http
       - name: Bearer
     - parameter id: (path)  
     - returns: RequestBuilder<URL> 
     */
    open class func batchesGetPdfWithRequestBuilder(id: Int64) -> RequestBuilder<URL> {
        var localVariablePath = "/api/batches/{id}/pdf"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<URL>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter hydrationLevel: (query)  (optional, default to 2)
     - returns: AnyPublisher<BatchViewModel, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func batchesGetPending(hydrationLevel: Int? = nil) -> AnyPublisher<BatchViewModel, Error> {
        let requestBuilder = batchesGetPendingWithRequestBuilder(hydrationLevel: hydrationLevel)
        let requestTask = requestBuilder.requestTask
        return Future<BatchViewModel, Error> { promise in
            requestBuilder.execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     - GET /api/batches/pending
     - BASIC:
       - type: http
       - name: Bearer
     - parameter hydrationLevel: (query)  (optional, default to 2)
     - returns: RequestBuilder<BatchViewModel> 
     */
    open class func batchesGetPendingWithRequestBuilder(hydrationLevel: Int? = nil) -> RequestBuilder<BatchViewModel> {
        let localVariablePath = "/api/batches/pending"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "hydrationLevel": (wrappedValue: hydrationLevel?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BatchViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter batchViewModel: (body)  
     - returns: AnyPublisher<BatchViewModel, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func batchesPost(batchViewModel: BatchViewModel) -> AnyPublisher<BatchViewModel, Error> {
        let requestBuilder = batchesPostWithRequestBuilder(batchViewModel: batchViewModel)
        let requestTask = requestBuilder.requestTask
        return Future<BatchViewModel, Error> { promise in
            requestBuilder.execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     - POST /api/batches
     - BASIC:
       - type: http
       - name: Bearer
     - parameter batchViewModel: (body)  
     - returns: RequestBuilder<BatchViewModel> 
     */
    open class func batchesPostWithRequestBuilder(batchViewModel: BatchViewModel) -> RequestBuilder<BatchViewModel> {
        let localVariablePath = "/api/batches"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: batchViewModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BatchViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path)  
     - parameter batchViewModel: (body)  
     - returns: AnyPublisher<URL, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func batchesPut(id: Int, batchViewModel: BatchViewModel) -> AnyPublisher<URL, Error> {
        let requestBuilder = batchesPutWithRequestBuilder(id: id, batchViewModel: batchViewModel)
        let requestTask = requestBuilder.requestTask
        return Future<URL, Error> { promise in
            requestBuilder.execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     - PUT /api/batches/{id}
     - BASIC:
       - type: http
       - name: Bearer
     - parameter id: (path)  
     - parameter batchViewModel: (body)  
     - returns: RequestBuilder<URL> 
     */
    open class func batchesPutWithRequestBuilder(id: Int, batchViewModel: BatchViewModel) -> RequestBuilder<URL> {
        var localVariablePath = "/api/batches/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: batchViewModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<URL>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Search Batches using available filters.
     
     - parameter getBatchListPagedQuery: (body)  
     - returns: AnyPublisher<PaginationResponseOfBatchListDto, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func batchesSearch(getBatchListPagedQuery: GetBatchListPagedQuery) -> AnyPublisher<PaginationResponseOfBatchListDto, Error> {
        let requestBuilder = batchesSearchWithRequestBuilder(getBatchListPagedQuery: getBatchListPagedQuery)
        let requestTask = requestBuilder.requestTask
        return Future<PaginationResponseOfBatchListDto, Error> { promise in
            requestBuilder.execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Search Batches using available filters.
     - POST /api/batches/search
     - BASIC:
       - type: http
       - name: Bearer
     - parameter getBatchListPagedQuery: (body)  
     - returns: RequestBuilder<PaginationResponseOfBatchListDto> 
     */
    open class func batchesSearchWithRequestBuilder(getBatchListPagedQuery: GetBatchListPagedQuery) -> RequestBuilder<PaginationResponseOfBatchListDto> {
        let localVariablePath = "/api/batches/search"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: getBatchListPagedQuery)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginationResponseOfBatchListDto>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter batchId: (path)  
     - parameter updateOrderItemVendorItemCommand: (body)  
     - returns: AnyPublisher<BatchDto, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func batchesUpdateOrderItemVendor(batchId: Int64, updateOrderItemVendorItemCommand: UpdateOrderItemVendorItemCommand) -> AnyPublisher<BatchDto, Error> {
        let requestBuilder = batchesUpdateOrderItemVendorWithRequestBuilder(batchId: batchId, updateOrderItemVendorItemCommand: updateOrderItemVendorItemCommand)
        let requestTask = requestBuilder.requestTask
        return Future<BatchDto, Error> { promise in
            requestBuilder.execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     - POST /api/batches/{batchId}/item/vendor
     - BASIC:
       - type: http
       - name: Bearer
     - parameter batchId: (path)  
     - parameter updateOrderItemVendorItemCommand: (body)  
     - returns: RequestBuilder<BatchDto> 
     */
    open class func batchesUpdateOrderItemVendorWithRequestBuilder(batchId: Int64, updateOrderItemVendorItemCommand: UpdateOrderItemVendorItemCommand) -> RequestBuilder<BatchDto> {
        var localVariablePath = "/api/batches/{batchId}/item/vendor"
        let batchIdPreEscape = "\(APIHelper.mapValueToPathItem(batchId))"
        let batchIdPostEscape = batchIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{batchId}", with: batchIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateOrderItemVendorItemCommand)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BatchDto>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path)  
     - parameter statusCode: (path)  
     - returns: AnyPublisher<BatchViewModel, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func batchesUpdateStatus(id: Int64, statusCode: String) -> AnyPublisher<BatchViewModel, Error> {
        let requestBuilder = batchesUpdateStatusWithRequestBuilder(id: id, statusCode: statusCode)
        let requestTask = requestBuilder.requestTask
        return Future<BatchViewModel, Error> { promise in
            requestBuilder.execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     - POST /api/batches/{id}/status/{statusCode}
     - BASIC:
       - type: http
       - name: Bearer
     - parameter id: (path)  
     - parameter statusCode: (path)  
     - returns: RequestBuilder<BatchViewModel> 
     */
    open class func batchesUpdateStatusWithRequestBuilder(id: Int64, statusCode: String) -> RequestBuilder<BatchViewModel> {
        var localVariablePath = "/api/batches/{id}/status/{statusCode}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let statusCodePreEscape = "\(APIHelper.mapValueToPathItem(statusCode))"
        let statusCodePostEscape = statusCodePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{statusCode}", with: statusCodePostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BatchViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
