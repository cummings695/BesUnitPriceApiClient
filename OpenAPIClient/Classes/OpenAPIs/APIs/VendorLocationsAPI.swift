//
// VendorLocationsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(Combine)
import Combine
#endif
#if canImport(AnyCodable)
import AnyCodable
#endif

open class VendorLocationsAPI {

    /**

     - parameter vendorId: (path)  
     - parameter id: (path)  
     - parameter apiVersion: (query)  (optional)
     - returns: AnyPublisher<URL, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func vendorLocationsDelete(vendorId: Int64, id: Int64, apiVersion: String? = nil) -> AnyPublisher<URL, Error> {
        let requestBuilder = vendorLocationsDeleteWithRequestBuilder(vendorId: vendorId, id: id, apiVersion: apiVersion)
        let requestTask = requestBuilder.requestTask
        return Future<URL, Error> { promise in
            requestBuilder.execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     - DELETE /api/vendor/{vendorId}/locations/{id}
     - BASIC:
       - type: http
       - name: Bearer
     - parameter vendorId: (path)  
     - parameter id: (path)  
     - parameter apiVersion: (query)  (optional)
     - returns: RequestBuilder<URL> 
     */
    open class func vendorLocationsDeleteWithRequestBuilder(vendorId: Int64, id: Int64, apiVersion: String? = nil) -> RequestBuilder<URL> {
        var localVariablePath = "/api/vendor/{vendorId}/locations/{id}"
        let vendorIdPreEscape = "\(APIHelper.mapValueToPathItem(vendorId))"
        let vendorIdPostEscape = vendorIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{vendorId}", with: vendorIdPostEscape, options: .literal, range: nil)
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "api-version": (wrappedValue: apiVersion?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<URL>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter vendorId: (path)  
     - parameter apiVersion: (query)  (optional)
     - returns: AnyPublisher<VendorViewModel, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func vendorLocationsGet(vendorId: Int64, apiVersion: String? = nil) -> AnyPublisher<VendorViewModel, Error> {
        let requestBuilder = vendorLocationsGetWithRequestBuilder(vendorId: vendorId, apiVersion: apiVersion)
        let requestTask = requestBuilder.requestTask
        return Future<VendorViewModel, Error> { promise in
            requestBuilder.execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     - GET /api/vendor/{vendorId}/locations
     - BASIC:
       - type: http
       - name: Bearer
     - parameter vendorId: (path)  
     - parameter apiVersion: (query)  (optional)
     - returns: RequestBuilder<VendorViewModel> 
     */
    open class func vendorLocationsGetWithRequestBuilder(vendorId: Int64, apiVersion: String? = nil) -> RequestBuilder<VendorViewModel> {
        var localVariablePath = "/api/vendor/{vendorId}/locations"
        let vendorIdPreEscape = "\(APIHelper.mapValueToPathItem(vendorId))"
        let vendorIdPostEscape = vendorIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{vendorId}", with: vendorIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "api-version": (wrappedValue: apiVersion?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<VendorViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter vendorId: (path)  
     - parameter id: (path)  
     - parameter apiVersion: (query)  (optional)
     - returns: AnyPublisher<URL, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func vendorLocationsGet2(vendorId: Int64, id: Int64, apiVersion: String? = nil) -> AnyPublisher<URL, Error> {
        let requestBuilder = vendorLocationsGet2WithRequestBuilder(vendorId: vendorId, id: id, apiVersion: apiVersion)
        let requestTask = requestBuilder.requestTask
        return Future<URL, Error> { promise in
            requestBuilder.execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     - GET /api/vendor/{vendorId}/locations/{id}
     - BASIC:
       - type: http
       - name: Bearer
     - parameter vendorId: (path)  
     - parameter id: (path)  
     - parameter apiVersion: (query)  (optional)
     - returns: RequestBuilder<URL> 
     */
    open class func vendorLocationsGet2WithRequestBuilder(vendorId: Int64, id: Int64, apiVersion: String? = nil) -> RequestBuilder<URL> {
        var localVariablePath = "/api/vendor/{vendorId}/locations/{id}"
        let vendorIdPreEscape = "\(APIHelper.mapValueToPathItem(vendorId))"
        let vendorIdPostEscape = vendorIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{vendorId}", with: vendorIdPostEscape, options: .literal, range: nil)
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "api-version": (wrappedValue: apiVersion?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<URL>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter vendorId: (path)  
     - parameter baseVendorLocationViewModel: (body)  
     - parameter apiVersion: (query)  (optional)
     - returns: AnyPublisher<URL, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func vendorLocationsPost(vendorId: Int64, baseVendorLocationViewModel: BaseVendorLocationViewModel, apiVersion: String? = nil) -> AnyPublisher<URL, Error> {
        let requestBuilder = vendorLocationsPostWithRequestBuilder(vendorId: vendorId, baseVendorLocationViewModel: baseVendorLocationViewModel, apiVersion: apiVersion)
        let requestTask = requestBuilder.requestTask
        return Future<URL, Error> { promise in
            requestBuilder.execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     - POST /api/vendor/{vendorId}/locations
     - BASIC:
       - type: http
       - name: Bearer
     - parameter vendorId: (path)  
     - parameter baseVendorLocationViewModel: (body)  
     - parameter apiVersion: (query)  (optional)
     - returns: RequestBuilder<URL> 
     */
    open class func vendorLocationsPostWithRequestBuilder(vendorId: Int64, baseVendorLocationViewModel: BaseVendorLocationViewModel, apiVersion: String? = nil) -> RequestBuilder<URL> {
        var localVariablePath = "/api/vendor/{vendorId}/locations"
        let vendorIdPreEscape = "\(APIHelper.mapValueToPathItem(vendorId))"
        let vendorIdPostEscape = vendorIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{vendorId}", with: vendorIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: baseVendorLocationViewModel)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "api-version": (wrappedValue: apiVersion?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<URL>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter vendorId: (path)  
     - parameter id: (path)  
     - parameter vendorLocationViewModel: (body)  
     - parameter apiVersion: (query)  (optional)
     - returns: AnyPublisher<URL, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func vendorLocationsPut(vendorId: Int64, id: Int64, vendorLocationViewModel: VendorLocationViewModel, apiVersion: String? = nil) -> AnyPublisher<URL, Error> {
        let requestBuilder = vendorLocationsPutWithRequestBuilder(vendorId: vendorId, id: id, vendorLocationViewModel: vendorLocationViewModel, apiVersion: apiVersion)
        let requestTask = requestBuilder.requestTask
        return Future<URL, Error> { promise in
            requestBuilder.execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     - PUT /api/vendor/{vendorId}/locations/{id}
     - BASIC:
       - type: http
       - name: Bearer
     - parameter vendorId: (path)  
     - parameter id: (path)  
     - parameter vendorLocationViewModel: (body)  
     - parameter apiVersion: (query)  (optional)
     - returns: RequestBuilder<URL> 
     */
    open class func vendorLocationsPutWithRequestBuilder(vendorId: Int64, id: Int64, vendorLocationViewModel: VendorLocationViewModel, apiVersion: String? = nil) -> RequestBuilder<URL> {
        var localVariablePath = "/api/vendor/{vendorId}/locations/{id}"
        let vendorIdPreEscape = "\(APIHelper.mapValueToPathItem(vendorId))"
        let vendorIdPostEscape = vendorIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{vendorId}", with: vendorIdPostEscape, options: .literal, range: nil)
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: vendorLocationViewModel)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "api-version": (wrappedValue: apiVersion?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<URL>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
