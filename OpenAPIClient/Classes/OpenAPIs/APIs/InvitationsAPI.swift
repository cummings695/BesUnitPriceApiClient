//
// InvitationsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(Combine)
import Combine
#endif
#if canImport(AnyCodable)
import AnyCodable
#endif

open class InvitationsAPI {

    /**

     - parameter id: (path)  
     - parameter acceptInvitationCommand: (body)  
     - returns: AnyPublisher<InvitationDto, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func invitationsAcceptInvitation(id: String, acceptInvitationCommand: AcceptInvitationCommand) -> AnyPublisher<InvitationDto, Error> {
        let requestBuilder = invitationsAcceptInvitationWithRequestBuilder(id: id, acceptInvitationCommand: acceptInvitationCommand)
        let requestTask = requestBuilder.requestTask
        return Future<InvitationDto, Error> { promise in
            requestBuilder.execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     - POST /api/invitations/{id}/accept
     - parameter id: (path)  
     - parameter acceptInvitationCommand: (body)  
     - returns: RequestBuilder<InvitationDto> 
     */
    open class func invitationsAcceptInvitationWithRequestBuilder(id: String, acceptInvitationCommand: AcceptInvitationCommand) -> RequestBuilder<InvitationDto> {
        var localVariablePath = "/api/invitations/{id}/accept"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: acceptInvitationCommand)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InvitationDto>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter createInvitationCommand: (body)  
     - returns: AnyPublisher<InvitationDto, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func invitationsCreateInvitation(createInvitationCommand: CreateInvitationCommand) -> AnyPublisher<InvitationDto, Error> {
        let requestBuilder = invitationsCreateInvitationWithRequestBuilder(createInvitationCommand: createInvitationCommand)
        let requestTask = requestBuilder.requestTask
        return Future<InvitationDto, Error> { promise in
            requestBuilder.execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     - POST /api/invitations/invite
     - BASIC:
       - type: http
       - name: Bearer
     - parameter createInvitationCommand: (body)  
     - returns: RequestBuilder<InvitationDto> 
     */
    open class func invitationsCreateInvitationWithRequestBuilder(createInvitationCommand: CreateInvitationCommand) -> RequestBuilder<InvitationDto> {
        let localVariablePath = "/api/invitations/invite"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createInvitationCommand)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InvitationDto>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path)  
     - returns: AnyPublisher<Void, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func invitationsGet(id: String) -> AnyPublisher<Void, Error> {
        let requestBuilder = invitationsGetWithRequestBuilder(id: id)
        let requestTask = requestBuilder.requestTask
        return Future<Void, Error> { promise in
            requestBuilder.execute { result in
                switch result {
                case .success:
                    promise(.success(()))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     - GET /api/invitations/{id}
     - parameter id: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func invitationsGetWithRequestBuilder(id: String) -> RequestBuilder<Void> {
        var localVariablePath = "/api/invitations/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
