//
// PersonalAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(Combine)
import Combine
#endif
#if canImport(AnyCodable)
import AnyCodable
#endif

open class PersonalAPI {

    /**
     Change Password of currently logged in user.
     
     - parameter changePasswordRequest: (body)  
     - returns: AnyPublisher<Bool, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func personalChangePassword(changePasswordRequest: ChangePasswordRequest) -> AnyPublisher<Bool, Error> {
        let requestBuilder = personalChangePasswordWithRequestBuilder(changePasswordRequest: changePasswordRequest)
        let requestTask = requestBuilder.requestTask
        return Future<Bool, Error> { promise in
            requestBuilder.execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Change Password of currently logged in user.
     - PUT /api/personal/password
     - BASIC:
       - type: http
       - name: Bearer
     - parameter changePasswordRequest: (body)  
     - returns: RequestBuilder<Bool> 
     */
    open class func personalChangePasswordWithRequestBuilder(changePasswordRequest: ChangePasswordRequest) -> RequestBuilder<Bool> {
        let localVariablePath = "/api/personal/password"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: changePasswordRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Bool>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - returns: AnyPublisher<Bool, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func personalGetCurrentUserIsOwner() -> AnyPublisher<Bool, Error> {
        let requestBuilder = personalGetCurrentUserIsOwnerWithRequestBuilder()
        let requestTask = requestBuilder.requestTask
        return Future<Bool, Error> { promise in
            requestBuilder.execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     - GET /api/personal/owner
     - BASIC:
       - type: http
       - name: Bearer
     - returns: RequestBuilder<Bool> 
     */
    open class func personalGetCurrentUserIsOwnerWithRequestBuilder() -> RequestBuilder<Bool> {
        let localVariablePath = "/api/personal/owner"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Bool>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - returns: AnyPublisher<PaginationResponseOfRestaurantDto, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func personalGetCurrentUserRestaurants() -> AnyPublisher<PaginationResponseOfRestaurantDto, Error> {
        let requestBuilder = personalGetCurrentUserRestaurantsWithRequestBuilder()
        let requestTask = requestBuilder.requestTask
        return Future<PaginationResponseOfRestaurantDto, Error> { promise in
            requestBuilder.execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     - GET /api/personal/restuarants
     - BASIC:
       - type: http
       - name: Bearer
     - returns: RequestBuilder<PaginationResponseOfRestaurantDto> 
     */
    open class func personalGetCurrentUserRestaurantsWithRequestBuilder() -> RequestBuilder<PaginationResponseOfRestaurantDto> {
        let localVariablePath = "/api/personal/restuarants"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginationResponseOfRestaurantDto>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - returns: AnyPublisher<[VendorDto], Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func personalGetCurrentUserVendors() -> AnyPublisher<[VendorDto], Error> {
        let requestBuilder = personalGetCurrentUserVendorsWithRequestBuilder()
        let requestTask = requestBuilder.requestTask
        return Future<[VendorDto], Error> { promise in
            requestBuilder.execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     - GET /api/personal/vendors
     - BASIC:
       - type: http
       - name: Bearer
     - returns: RequestBuilder<[VendorDto]> 
     */
    open class func personalGetCurrentUserVendorsWithRequestBuilder() -> RequestBuilder<[VendorDto]> {
        let localVariablePath = "/api/personal/vendors"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[VendorDto]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get audit logs of currently logged in user.
     
     - returns: AnyPublisher<[AuditDto], Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func personalGetLogs() -> AnyPublisher<[AuditDto], Error> {
        let requestBuilder = personalGetLogsWithRequestBuilder()
        let requestTask = requestBuilder.requestTask
        return Future<[AuditDto], Error> { promise in
            requestBuilder.execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Get audit logs of currently logged in user.
     - GET /api/personal/logs
     - BASIC:
       - type: http
       - name: Bearer
     - returns: RequestBuilder<[AuditDto]> 
     */
    open class func personalGetLogsWithRequestBuilder() -> RequestBuilder<[AuditDto]> {
        let localVariablePath = "/api/personal/logs"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[AuditDto]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get permissions of currently logged in user.
     
     - returns: AnyPublisher<[String], Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func personalGetPermissions() -> AnyPublisher<[String], Error> {
        let requestBuilder = personalGetPermissionsWithRequestBuilder()
        let requestTask = requestBuilder.requestTask
        return Future<[String], Error> { promise in
            requestBuilder.execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Get permissions of currently logged in user.
     - GET /api/personal/permissions
     - BASIC:
       - type: http
       - name: Bearer
     - returns: RequestBuilder<[String]> 
     */
    open class func personalGetPermissionsWithRequestBuilder() -> RequestBuilder<[String]> {
        let localVariablePath = "/api/personal/permissions"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[String]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get profile details of currently logged in user.
     
     - returns: AnyPublisher<UserDetailsDto, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func personalGetProfile() -> AnyPublisher<UserDetailsDto, Error> {
        let requestBuilder = personalGetProfileWithRequestBuilder()
        let requestTask = requestBuilder.requestTask
        return Future<UserDetailsDto, Error> { promise in
            requestBuilder.execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Get profile details of currently logged in user.
     - GET /api/personal
     - BASIC:
       - type: http
       - name: Bearer
     - returns: RequestBuilder<UserDetailsDto> 
     */
    open class func personalGetProfileWithRequestBuilder() -> RequestBuilder<UserDetailsDto> {
        let localVariablePath = "/api/personal"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserDetailsDto>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Update profile details of currently logged in user.
     
     - parameter updateUserRequest: (body)  
     - returns: AnyPublisher<Bool, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func personalUpdateProfile(updateUserRequest: UpdateUserRequest) -> AnyPublisher<Bool, Error> {
        let requestBuilder = personalUpdateProfileWithRequestBuilder(updateUserRequest: updateUserRequest)
        let requestTask = requestBuilder.requestTask
        return Future<Bool, Error> { promise in
            requestBuilder.execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Update profile details of currently logged in user.
     - PUT /api/personal
     - BASIC:
       - type: http
       - name: Bearer
     - parameter updateUserRequest: (body)  
     - returns: RequestBuilder<Bool> 
     */
    open class func personalUpdateProfileWithRequestBuilder(updateUserRequest: UpdateUserRequest) -> RequestBuilder<Bool> {
        let localVariablePath = "/api/personal"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateUserRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Bool>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter updateUserSettingsCommand: (body)  
     - returns: AnyPublisher<UserViewModel, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func personalUpdateUserSettings(updateUserSettingsCommand: UpdateUserSettingsCommand) -> AnyPublisher<UserViewModel, Error> {
        let requestBuilder = personalUpdateUserSettingsWithRequestBuilder(updateUserSettingsCommand: updateUserSettingsCommand)
        let requestTask = requestBuilder.requestTask
        return Future<UserViewModel, Error> { promise in
            requestBuilder.execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     - PUT /api/personal/settings
     - BASIC:
       - type: http
       - name: Bearer
     - parameter updateUserSettingsCommand: (body)  
     - returns: RequestBuilder<UserViewModel> 
     */
    open class func personalUpdateUserSettingsWithRequestBuilder(updateUserSettingsCommand: UpdateUserSettingsCommand) -> RequestBuilder<UserViewModel> {
        let localVariablePath = "/api/personal/settings"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateUserSettingsCommand)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
