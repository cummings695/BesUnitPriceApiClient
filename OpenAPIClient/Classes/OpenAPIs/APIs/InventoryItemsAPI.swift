//
// InventoryItemsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(Combine)
import Combine
#endif
#if canImport(AnyCodable)
import AnyCodable
#endif

open class InventoryItemsAPI {

    /**

     - parameter mockInventoryItemsPostDto: (body)  
     - returns: AnyPublisher<Void, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func inventoryItemsAddMockInventoryItems(mockInventoryItemsPostDto: MockInventoryItemsPostDto) -> AnyPublisher<Void, Error> {
        let requestBuilder = inventoryItemsAddMockInventoryItemsWithRequestBuilder(mockInventoryItemsPostDto: mockInventoryItemsPostDto)
        let requestTask = requestBuilder.requestTask
        return Future<Void, Error> { promise in
            requestBuilder.execute { result in
                switch result {
                case .success:
                    promise(.success(()))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     - POST /api/inventoryitems/mock
     - BASIC:
       - type: http
       - name: Bearer
     - parameter mockInventoryItemsPostDto: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func inventoryItemsAddMockInventoryItemsWithRequestBuilder(mockInventoryItemsPostDto: MockInventoryItemsPostDto) -> RequestBuilder<Void> {
        let localVariablePath = "/api/inventoryitems/mock"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: mockInventoryItemsPostDto)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path)  
     - parameter vendorId: (path)  
     - parameter createInventoryItemVendorPriceCommand: (body)  
     - returns: AnyPublisher<URL, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func inventoryItemsAddVendor(id: String, vendorId: String, createInventoryItemVendorPriceCommand: CreateInventoryItemVendorPriceCommand) -> AnyPublisher<URL, Error> {
        let requestBuilder = inventoryItemsAddVendorWithRequestBuilder(id: id, vendorId: vendorId, createInventoryItemVendorPriceCommand: createInventoryItemVendorPriceCommand)
        let requestTask = requestBuilder.requestTask
        return Future<URL, Error> { promise in
            requestBuilder.execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     - POST /api/inventoryitems/{id}/vendor/{vendorId}
     - BASIC:
       - type: http
       - name: Bearer
     - parameter id: (path)  
     - parameter vendorId: (path)  
     - parameter createInventoryItemVendorPriceCommand: (body)  
     - returns: RequestBuilder<URL> 
     */
    open class func inventoryItemsAddVendorWithRequestBuilder(id: String, vendorId: String, createInventoryItemVendorPriceCommand: CreateInventoryItemVendorPriceCommand) -> RequestBuilder<URL> {
        var localVariablePath = "/api/inventoryitems/{id}/vendor/{vendorId}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let vendorIdPreEscape = "\(APIHelper.mapValueToPathItem(vendorId))"
        let vendorIdPostEscape = vendorIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{vendorId}", with: vendorIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createInventoryItemVendorPriceCommand)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<URL>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path)  
     - returns: AnyPublisher<URL, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func inventoryItemsDelete(id: Int) -> AnyPublisher<URL, Error> {
        let requestBuilder = inventoryItemsDeleteWithRequestBuilder(id: id)
        let requestTask = requestBuilder.requestTask
        return Future<URL, Error> { promise in
            requestBuilder.execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     - DELETE /api/inventoryitems/{id}
     - BASIC:
       - type: http
       - name: Bearer
     - parameter id: (path)  
     - returns: RequestBuilder<URL> 
     */
    open class func inventoryItemsDeleteWithRequestBuilder(id: Int) -> RequestBuilder<URL> {
        var localVariablePath = "/api/inventoryitems/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<URL>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path)  
     - parameter productPriceId: (path)  
     - returns: AnyPublisher<URL, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func inventoryItemsDeleteVendor(id: Int64, productPriceId: Int64) -> AnyPublisher<URL, Error> {
        let requestBuilder = inventoryItemsDeleteVendorWithRequestBuilder(id: id, productPriceId: productPriceId)
        let requestTask = requestBuilder.requestTask
        return Future<URL, Error> { promise in
            requestBuilder.execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     - DELETE /api/inventoryitems/{id}/vendor/{productPriceId}
     - BASIC:
       - type: http
       - name: Bearer
     - parameter id: (path)  
     - parameter productPriceId: (path)  
     - returns: RequestBuilder<URL> 
     */
    open class func inventoryItemsDeleteVendorWithRequestBuilder(id: Int64, productPriceId: Int64) -> RequestBuilder<URL> {
        var localVariablePath = "/api/inventoryitems/{id}/vendor/{productPriceId}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let productPriceIdPreEscape = "\(APIHelper.mapValueToPathItem(productPriceId))"
        let productPriceIdPostEscape = productPriceIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{productPriceId}", with: productPriceIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<URL>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter zoneId: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter orderCode: (query)  (optional)
     - parameter restaurantId: (query)  (optional)
     - parameter hydrationLevel: (query)  (optional)
     - parameter active: (query)  (optional)
     - parameter page: (query)  (optional)
     - parameter pageSize: (query)  (optional)
     - parameter sort: (query)  (optional)
     - returns: AnyPublisher<PaginatedListViewModelOfInventoryItemDto, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func inventoryItemsFind(zoneId: Int64? = nil, name: String? = nil, orderCode: String? = nil, restaurantId: Int64? = nil, hydrationLevel: Int? = nil, active: Bool? = nil, page: Int? = nil, pageSize: Int? = nil, sort: String? = nil) -> AnyPublisher<PaginatedListViewModelOfInventoryItemDto, Error> {
        let requestBuilder = inventoryItemsFindWithRequestBuilder(zoneId: zoneId, name: name, orderCode: orderCode, restaurantId: restaurantId, hydrationLevel: hydrationLevel, active: active, page: page, pageSize: pageSize, sort: sort)
        let requestTask = requestBuilder.requestTask
        return Future<PaginatedListViewModelOfInventoryItemDto, Error> { promise in
            requestBuilder.execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     - GET /api/inventoryitems
     - BASIC:
       - type: http
       - name: Bearer
     - parameter zoneId: (query)  (optional)
     - parameter name: (query)  (optional)
     - parameter orderCode: (query)  (optional)
     - parameter restaurantId: (query)  (optional)
     - parameter hydrationLevel: (query)  (optional)
     - parameter active: (query)  (optional)
     - parameter page: (query)  (optional)
     - parameter pageSize: (query)  (optional)
     - parameter sort: (query)  (optional)
     - returns: RequestBuilder<PaginatedListViewModelOfInventoryItemDto> 
     */
    open class func inventoryItemsFindWithRequestBuilder(zoneId: Int64? = nil, name: String? = nil, orderCode: String? = nil, restaurantId: Int64? = nil, hydrationLevel: Int? = nil, active: Bool? = nil, page: Int? = nil, pageSize: Int? = nil, sort: String? = nil) -> RequestBuilder<PaginatedListViewModelOfInventoryItemDto> {
        let localVariablePath = "/api/inventoryitems"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "ZoneId": (wrappedValue: zoneId?.encodeToJSON(), isExplode: true),
            "Name": (wrappedValue: name?.encodeToJSON(), isExplode: true),
            "OrderCode": (wrappedValue: orderCode?.encodeToJSON(), isExplode: true),
            "RestaurantId": (wrappedValue: restaurantId?.encodeToJSON(), isExplode: true),
            "HydrationLevel": (wrappedValue: hydrationLevel?.encodeToJSON(), isExplode: true),
            "Active": (wrappedValue: active?.encodeToJSON(), isExplode: true),
            "Page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "PageSize": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "Sort": (wrappedValue: sort?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedListViewModelOfInventoryItemDto>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path)  
     - returns: AnyPublisher<InventoryItemDto, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func inventoryItemsGet(id: Int64) -> AnyPublisher<InventoryItemDto, Error> {
        let requestBuilder = inventoryItemsGetWithRequestBuilder(id: id)
        let requestTask = requestBuilder.requestTask
        return Future<InventoryItemDto, Error> { promise in
            requestBuilder.execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     - GET /api/inventoryitems/{id}
     - BASIC:
       - type: http
       - name: Bearer
     - parameter id: (path)  
     - returns: RequestBuilder<InventoryItemDto> 
     */
    open class func inventoryItemsGetWithRequestBuilder(id: Int64) -> RequestBuilder<InventoryItemDto> {
        var localVariablePath = "/api/inventoryitems/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<InventoryItemDto>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path)  
     - returns: AnyPublisher<URL, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func inventoryItemsGetAveragePricing(id: Int64) -> AnyPublisher<URL, Error> {
        let requestBuilder = inventoryItemsGetAveragePricingWithRequestBuilder(id: id)
        let requestTask = requestBuilder.requestTask
        return Future<URL, Error> { promise in
            requestBuilder.execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     - GET /api/inventoryitems/{id}/price/average
     - BASIC:
       - type: http
       - name: Bearer
     - parameter id: (path)  
     - returns: RequestBuilder<URL> 
     */
    open class func inventoryItemsGetAveragePricingWithRequestBuilder(id: Int64) -> RequestBuilder<URL> {
        var localVariablePath = "/api/inventoryitems/{id}/price/average"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<URL>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path)  
     - parameter vendorId: (query)  (optional)
     - returns: AnyPublisher<URL, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func inventoryItemsGetAverageVendorPricing(id: Int64, vendorId: Int64? = nil) -> AnyPublisher<URL, Error> {
        let requestBuilder = inventoryItemsGetAverageVendorPricingWithRequestBuilder(id: id, vendorId: vendorId)
        let requestTask = requestBuilder.requestTask
        return Future<URL, Error> { promise in
            requestBuilder.execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     - GET /api/inventoryitems/{id}/vendor/price/average
     - BASIC:
       - type: http
       - name: Bearer
     - parameter id: (path)  
     - parameter vendorId: (query)  (optional)
     - returns: RequestBuilder<URL> 
     */
    open class func inventoryItemsGetAverageVendorPricingWithRequestBuilder(id: Int64, vendorId: Int64? = nil) -> RequestBuilder<URL> {
        var localVariablePath = "/api/inventoryitems/{id}/vendor/price/average"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "vendorId": (wrappedValue: vendorId?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<URL>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - returns: AnyPublisher<URL, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func inventoryItemsGetPdf() -> AnyPublisher<URL, Error> {
        let requestBuilder = inventoryItemsGetPdfWithRequestBuilder()
        let requestTask = requestBuilder.requestTask
        return Future<URL, Error> { promise in
            requestBuilder.execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     - GET /api/inventoryitems/pdf
     - BASIC:
       - type: http
       - name: Bearer
     - returns: RequestBuilder<URL> 
     */
    open class func inventoryItemsGetPdfWithRequestBuilder() -> RequestBuilder<URL> {
        let localVariablePath = "/api/inventoryitems/pdf"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<URL>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path)  
     - parameter vendorId: (path)  
     - returns: AnyPublisher<URL, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func inventoryItemsGetProductVendorPriceHistory(id: Int64, vendorId: Int64) -> AnyPublisher<URL, Error> {
        let requestBuilder = inventoryItemsGetProductVendorPriceHistoryWithRequestBuilder(id: id, vendorId: vendorId)
        let requestTask = requestBuilder.requestTask
        return Future<URL, Error> { promise in
            requestBuilder.execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     - GET /api/inventoryitems/{id}/vendor/{vendorId}/price/history
     - BASIC:
       - type: http
       - name: Bearer
     - parameter id: (path)  
     - parameter vendorId: (path)  
     - returns: RequestBuilder<URL> 
     */
    open class func inventoryItemsGetProductVendorPriceHistoryWithRequestBuilder(id: Int64, vendorId: Int64) -> RequestBuilder<URL> {
        var localVariablePath = "/api/inventoryitems/{id}/vendor/{vendorId}/price/history"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let vendorIdPreEscape = "\(APIHelper.mapValueToPathItem(vendorId))"
        let vendorIdPostEscape = vendorIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{vendorId}", with: vendorIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<URL>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path)  
     - parameter vendorId: (path)  
     - parameter productPricePatchViewModel: (body)  
     - returns: AnyPublisher<URL, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func inventoryItemsPatchVendor(id: Int64, vendorId: Int64, productPricePatchViewModel: ProductPricePatchViewModel) -> AnyPublisher<URL, Error> {
        let requestBuilder = inventoryItemsPatchVendorWithRequestBuilder(id: id, vendorId: vendorId, productPricePatchViewModel: productPricePatchViewModel)
        let requestTask = requestBuilder.requestTask
        return Future<URL, Error> { promise in
            requestBuilder.execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     - PATCH /api/inventoryitems/{id}/vendor/{vendorId}
     - BASIC:
       - type: http
       - name: Bearer
     - parameter id: (path)  
     - parameter vendorId: (path)  
     - parameter productPricePatchViewModel: (body)  
     - returns: RequestBuilder<URL> 
     */
    open class func inventoryItemsPatchVendorWithRequestBuilder(id: Int64, vendorId: Int64, productPricePatchViewModel: ProductPricePatchViewModel) -> RequestBuilder<URL> {
        var localVariablePath = "/api/inventoryitems/{id}/vendor/{vendorId}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let vendorIdPreEscape = "\(APIHelper.mapValueToPathItem(vendorId))"
        let vendorIdPostEscape = vendorIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{vendorId}", with: vendorIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: productPricePatchViewModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<URL>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter createInventoryItemCommand: (body)  
     - returns: AnyPublisher<URL, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func inventoryItemsPost(createInventoryItemCommand: CreateInventoryItemCommand) -> AnyPublisher<URL, Error> {
        let requestBuilder = inventoryItemsPostWithRequestBuilder(createInventoryItemCommand: createInventoryItemCommand)
        let requestTask = requestBuilder.requestTask
        return Future<URL, Error> { promise in
            requestBuilder.execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     - POST /api/inventoryitems
     - BASIC:
       - type: http
       - name: Bearer
     - parameter createInventoryItemCommand: (body)  
     - returns: RequestBuilder<URL> 
     */
    open class func inventoryItemsPostWithRequestBuilder(createInventoryItemCommand: CreateInventoryItemCommand) -> RequestBuilder<URL> {
        let localVariablePath = "/api/inventoryitems"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createInventoryItemCommand)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<URL>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path)  
     - parameter inventoryItemPutViewModel: (body)  
     - returns: AnyPublisher<URL, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func inventoryItemsPut(id: Int, inventoryItemPutViewModel: InventoryItemPutViewModel) -> AnyPublisher<URL, Error> {
        let requestBuilder = inventoryItemsPutWithRequestBuilder(id: id, inventoryItemPutViewModel: inventoryItemPutViewModel)
        let requestTask = requestBuilder.requestTask
        return Future<URL, Error> { promise in
            requestBuilder.execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     - PUT /api/inventoryitems/{id}
     - BASIC:
       - type: http
       - name: Bearer
     - parameter id: (path)  
     - parameter inventoryItemPutViewModel: (body)  
     - returns: RequestBuilder<URL> 
     */
    open class func inventoryItemsPutWithRequestBuilder(id: Int, inventoryItemPutViewModel: InventoryItemPutViewModel) -> RequestBuilder<URL> {
        var localVariablePath = "/api/inventoryitems/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: inventoryItemPutViewModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<URL>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter searchTerm: (query)  (optional)
     - parameter page: (query)  (optional)
     - parameter pageSize: (query)  (optional)
     - parameter orderBy: (query)  (optional)
     - parameter advancedSearchFields: (query)  (optional)
     - parameter advancedSearchKeyword: (query)  (optional)
     - parameter keyword: (query)  (optional)
     - parameter advancedFilterLogic: (query)  (optional)
     - parameter advancedFilterFilters: (query)  (optional)
     - parameter advancedFilterField: (query)  (optional)
     - parameter advancedFilterOperator: (query)  (optional)
     - parameter advancedFilterValue: (query)  (optional)
     - returns: AnyPublisher<PaginationResponseOfInventoryItemDto, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func inventoryItemsSearchGET(searchTerm: String? = nil, page: Int? = nil, pageSize: Int? = nil, orderBy: [String]? = nil, advancedSearchFields: [String]? = nil, advancedSearchKeyword: String? = nil, keyword: String? = nil, advancedFilterLogic: String? = nil, advancedFilterFilters: [Filter]? = nil, advancedFilterField: String? = nil, advancedFilterOperator: String? = nil, advancedFilterValue: AnyCodable? = nil) -> AnyPublisher<PaginationResponseOfInventoryItemDto, Error> {
        let requestBuilder = inventoryItemsSearchGETWithRequestBuilder(searchTerm: searchTerm, page: page, pageSize: pageSize, orderBy: orderBy, advancedSearchFields: advancedSearchFields, advancedSearchKeyword: advancedSearchKeyword, keyword: keyword, advancedFilterLogic: advancedFilterLogic, advancedFilterFilters: advancedFilterFilters, advancedFilterField: advancedFilterField, advancedFilterOperator: advancedFilterOperator, advancedFilterValue: advancedFilterValue)
        let requestTask = requestBuilder.requestTask
        return Future<PaginationResponseOfInventoryItemDto, Error> { promise in
            requestBuilder.execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     - GET /api/inventoryitems/search
     - BASIC:
       - type: http
       - name: Bearer
     - parameter searchTerm: (query)  (optional)
     - parameter page: (query)  (optional)
     - parameter pageSize: (query)  (optional)
     - parameter orderBy: (query)  (optional)
     - parameter advancedSearchFields: (query)  (optional)
     - parameter advancedSearchKeyword: (query)  (optional)
     - parameter keyword: (query)  (optional)
     - parameter advancedFilterLogic: (query)  (optional)
     - parameter advancedFilterFilters: (query)  (optional)
     - parameter advancedFilterField: (query)  (optional)
     - parameter advancedFilterOperator: (query)  (optional)
     - parameter advancedFilterValue: (query)  (optional)
     - returns: RequestBuilder<PaginationResponseOfInventoryItemDto> 
     */
    open class func inventoryItemsSearchGETWithRequestBuilder(searchTerm: String? = nil, page: Int? = nil, pageSize: Int? = nil, orderBy: [String]? = nil, advancedSearchFields: [String]? = nil, advancedSearchKeyword: String? = nil, keyword: String? = nil, advancedFilterLogic: String? = nil, advancedFilterFilters: [Filter]? = nil, advancedFilterField: String? = nil, advancedFilterOperator: String? = nil, advancedFilterValue: AnyCodable? = nil) -> RequestBuilder<PaginationResponseOfInventoryItemDto> {
        let localVariablePath = "/api/inventoryitems/search"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "SearchTerm": (wrappedValue: searchTerm?.encodeToJSON(), isExplode: true),
            "Page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "PageSize": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "OrderBy": (wrappedValue: orderBy?.encodeToJSON(), isExplode: true),
//            "AdvancedSearch.Fields": (wrappedValue: advancedSearchFields?.encodeToJSON(), isExplode: true),
//            "AdvancedSearch.Keyword": (wrappedValue: advancedSearchKeyword?.encodeToJSON(), isExplode: true),
//            "Keyword": (wrappedValue: keyword?.encodeToJSON(), isExplode: true),
//            "AdvancedFilter.Logic": (wrappedValue: advancedFilterLogic?.encodeToJSON(), isExplode: true),
//            "AdvancedFilter.Filters": (wrappedValue: advancedFilterFilters?.encodeToJSON(), isExplode: true),
//            "AdvancedFilter.Field": (wrappedValue: advancedFilterField?.encodeToJSON(), isExplode: true),
//            "AdvancedFilter.Operator": (wrappedValue: advancedFilterOperator?.encodeToJSON(), isExplode: true),
//            "AdvancedFilter.Value": (wrappedValue: advancedFilterValue?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginationResponseOfInventoryItemDto>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Search Items using available filters.
     
     - parameter getInventoryItemsQuery: (body)  
     - returns: AnyPublisher<PaginatedListViewModelOfInventoryItemDto, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func inventoryItemsSearchPOST(getInventoryItemsQuery: GetInventoryItemsQuery) -> AnyPublisher<PaginatedListViewModelOfInventoryItemDto, Error> {
        let requestBuilder = inventoryItemsSearchPOSTWithRequestBuilder(getInventoryItemsQuery: getInventoryItemsQuery)
        let requestTask = requestBuilder.requestTask
        return Future<PaginatedListViewModelOfInventoryItemDto, Error> { promise in
            requestBuilder.execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Search Items using available filters.
     - POST /api/inventoryitems/search
     - BASIC:
       - type: http
       - name: Bearer
     - parameter getInventoryItemsQuery: (body)  
     - returns: RequestBuilder<PaginatedListViewModelOfInventoryItemDto> 
     */
    open class func inventoryItemsSearchPOSTWithRequestBuilder(getInventoryItemsQuery: GetInventoryItemsQuery) -> RequestBuilder<PaginatedListViewModelOfInventoryItemDto> {
        let localVariablePath = "/api/inventoryitems/search"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: getInventoryItemsQuery)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<PaginatedListViewModelOfInventoryItemDto>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path)  
     - parameter vendorId: (path)  
     - parameter updateInventoryItemVendorPriceCommand: (body)  
     - returns: AnyPublisher<URL, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func inventoryItemsUpdateVendor(id: String, vendorId: String, updateInventoryItemVendorPriceCommand: UpdateInventoryItemVendorPriceCommand) -> AnyPublisher<URL, Error> {
        let requestBuilder = inventoryItemsUpdateVendorWithRequestBuilder(id: id, vendorId: vendorId, updateInventoryItemVendorPriceCommand: updateInventoryItemVendorPriceCommand)
        let requestTask = requestBuilder.requestTask
        return Future<URL, Error> { promise in
            requestBuilder.execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     - PUT /api/inventoryitems/{id}/vendor/{vendorId}
     - BASIC:
       - type: http
       - name: Bearer
     - parameter id: (path)  
     - parameter vendorId: (path)  
     - parameter updateInventoryItemVendorPriceCommand: (body)  
     - returns: RequestBuilder<URL> 
     */
    open class func inventoryItemsUpdateVendorWithRequestBuilder(id: String, vendorId: String, updateInventoryItemVendorPriceCommand: UpdateInventoryItemVendorPriceCommand) -> RequestBuilder<URL> {
        var localVariablePath = "/api/inventoryitems/{id}/vendor/{vendorId}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let vendorIdPreEscape = "\(APIHelper.mapValueToPathItem(vendorId))"
        let vendorIdPostEscape = vendorIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{vendorId}", with: vendorIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateInventoryItemVendorPriceCommand)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<URL>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
