//
// OrdersAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(Combine)
import Combine
#endif
#if canImport(AnyCodable)
import AnyCodable
#endif

open class OrdersAPI {

    /**

     - parameter id: (query)  (optional)
     - parameter apiVersion: (query)  (optional)
     - returns: AnyPublisher<URL, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func ordersDelete(id: Int64? = nil, apiVersion: String? = nil) -> AnyPublisher<URL, Error> {
        let requestBuilder = ordersDeleteWithRequestBuilder(id: id, apiVersion: apiVersion)
        let requestTask = requestBuilder.requestTask
        return Future<URL, Error> { promise in
            requestBuilder.execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     - DELETE /api/orders
     - BASIC:
       - type: http
       - name: Bearer
     - parameter id: (query)  (optional)
     - parameter apiVersion: (query)  (optional)
     - returns: RequestBuilder<URL> 
     */
    open class func ordersDeleteWithRequestBuilder(id: Int64? = nil, apiVersion: String? = nil) -> RequestBuilder<URL> {
        let localVariablePath = "/api/orders"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "id": (wrappedValue: id?.encodeToJSON(), isExplode: true),
            "api-version": (wrappedValue: apiVersion?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<URL>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter restaurantId: (query)  (optional)
     - parameter statuses: (query)  (optional)
     - parameter startDate: (query)  (optional)
     - parameter endDate: (query)  (optional)
     - parameter hydrationLevel: (query)  (optional)
     - parameter page: (query)  (optional)
     - parameter pageSize: (query)  (optional)
     - parameter apiVersion: (query)  (optional)
     - returns: AnyPublisher<URL, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func ordersGet(restaurantId: Int64? = nil, statuses: [String]? = nil, startDate: Date? = nil, endDate: Date? = nil, hydrationLevel: Int? = nil, page: Int? = nil, pageSize: Int? = nil, apiVersion: String? = nil) -> AnyPublisher<URL, Error> {
        let requestBuilder = ordersGetWithRequestBuilder(restaurantId: restaurantId, statuses: statuses, startDate: startDate, endDate: endDate, hydrationLevel: hydrationLevel, page: page, pageSize: pageSize, apiVersion: apiVersion)
        let requestTask = requestBuilder.requestTask
        return Future<URL, Error> { promise in
            requestBuilder.execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     - GET /api/orders
     - BASIC:
       - type: http
       - name: Bearer
     - parameter restaurantId: (query)  (optional)
     - parameter statuses: (query)  (optional)
     - parameter startDate: (query)  (optional)
     - parameter endDate: (query)  (optional)
     - parameter hydrationLevel: (query)  (optional)
     - parameter page: (query)  (optional)
     - parameter pageSize: (query)  (optional)
     - parameter apiVersion: (query)  (optional)
     - returns: RequestBuilder<URL> 
     */
    open class func ordersGetWithRequestBuilder(restaurantId: Int64? = nil, statuses: [String]? = nil, startDate: Date? = nil, endDate: Date? = nil, hydrationLevel: Int? = nil, page: Int? = nil, pageSize: Int? = nil, apiVersion: String? = nil) -> RequestBuilder<URL> {
        let localVariablePath = "/api/orders"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "RestaurantId": (wrappedValue: restaurantId?.encodeToJSON(), isExplode: true),
            "Statuses": (wrappedValue: statuses?.encodeToJSON(), isExplode: true),
            "StartDate": (wrappedValue: startDate?.encodeToJSON(), isExplode: true),
            "EndDate": (wrappedValue: endDate?.encodeToJSON(), isExplode: true),
            "HydrationLevel": (wrappedValue: hydrationLevel?.encodeToJSON(), isExplode: true),
            "Page": (wrappedValue: page?.encodeToJSON(), isExplode: true),
            "PageSize": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "api-version": (wrappedValue: apiVersion?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<URL>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path)  
     - parameter apiVersion: (query)  (optional)
     - returns: AnyPublisher<OrderViewModel, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func ordersGet2(id: Int64, apiVersion: String? = nil) -> AnyPublisher<OrderViewModel, Error> {
        let requestBuilder = ordersGet2WithRequestBuilder(id: id, apiVersion: apiVersion)
        let requestTask = requestBuilder.requestTask
        return Future<OrderViewModel, Error> { promise in
            requestBuilder.execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     - GET /api/orders/{id}
     - BASIC:
       - type: http
       - name: Bearer
     - parameter id: (path)  
     - parameter apiVersion: (query)  (optional)
     - returns: RequestBuilder<OrderViewModel> 
     */
    open class func ordersGet2WithRequestBuilder(id: Int64, apiVersion: String? = nil) -> RequestBuilder<OrderViewModel> {
        var localVariablePath = "/api/orders/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "api-version": (wrappedValue: apiVersion?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OrderViewModel>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path)  
     - parameter apiVersion: (query)  (optional)
     - returns: AnyPublisher<URL, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func ordersGetPdf(id: Int64, apiVersion: String? = nil) -> AnyPublisher<URL, Error> {
        let requestBuilder = ordersGetPdfWithRequestBuilder(id: id, apiVersion: apiVersion)
        let requestTask = requestBuilder.requestTask
        return Future<URL, Error> { promise in
            requestBuilder.execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     - GET /api/orders/{id}/pdf
     - BASIC:
       - type: http
       - name: Bearer
     - parameter id: (path)  
     - parameter apiVersion: (query)  (optional)
     - returns: RequestBuilder<URL> 
     */
    open class func ordersGetPdfWithRequestBuilder(id: Int64, apiVersion: String? = nil) -> RequestBuilder<URL> {
        var localVariablePath = "/api/orders/{id}/pdf"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "api-version": (wrappedValue: apiVersion?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<URL>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path)  
     - parameter orderPutViewModel: (body)  
     - parameter apiVersion: (query)  (optional)
     - returns: AnyPublisher<URL, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func ordersPut(id: Int64, orderPutViewModel: OrderPutViewModel, apiVersion: String? = nil) -> AnyPublisher<URL, Error> {
        let requestBuilder = ordersPutWithRequestBuilder(id: id, orderPutViewModel: orderPutViewModel, apiVersion: apiVersion)
        let requestTask = requestBuilder.requestTask
        return Future<URL, Error> { promise in
            requestBuilder.execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     - PUT /api/orders/{id}
     - BASIC:
       - type: http
       - name: Bearer
     - parameter id: (path)  
     - parameter orderPutViewModel: (body)  
     - parameter apiVersion: (query)  (optional)
     - returns: RequestBuilder<URL> 
     */
    open class func ordersPutWithRequestBuilder(id: Int64, orderPutViewModel: OrderPutViewModel, apiVersion: String? = nil) -> RequestBuilder<URL> {
        var localVariablePath = "/api/orders/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: orderPutViewModel)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "api-version": (wrappedValue: apiVersion?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<URL>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path)  
     - parameter status: (path)  
     - parameter apiVersion: (query)  (optional)
     - returns: AnyPublisher<URL, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func ordersUpdateStatus(id: Int64, status: OrderStatus, apiVersion: String? = nil) -> AnyPublisher<URL, Error> {
        let requestBuilder = ordersUpdateStatusWithRequestBuilder(id: id, status: status, apiVersion: apiVersion)
        let requestTask = requestBuilder.requestTask
        return Future<URL, Error> { promise in
            requestBuilder.execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     - POST /api/orders/{id}/status/{status}
     - BASIC:
       - type: http
       - name: Bearer
     - parameter id: (path)  
     - parameter status: (path)  
     - parameter apiVersion: (query)  (optional)
     - returns: RequestBuilder<URL> 
     */
    open class func ordersUpdateStatusWithRequestBuilder(id: Int64, status: OrderStatus, apiVersion: String? = nil) -> RequestBuilder<URL> {
        var localVariablePath = "/api/orders/{id}/status/{status}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let statusPreEscape = "\(APIHelper.mapValueToPathItem(status))"
        let statusPostEscape = statusPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{status}", with: statusPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "api-version": (wrappedValue: apiVersion?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<URL>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
