//
// VendorAveragePriceViewModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct VendorAveragePriceViewModel: Codable, JSONEncodable, Hashable {

    public var id: Int64?
    public var name: String?
    public var quantity: Double?
    public var count: Double?
    public var averagePrice: Double?
    public var itemNumber: String?
    public var brand: String?
    public var vendorDescription: String?

    public init(id: Int64? = nil, name: String? = nil, quantity: Double? = nil, count: Double? = nil, averagePrice: Double? = nil, itemNumber: String? = nil, brand: String? = nil, vendorDescription: String? = nil) {
        self.id = id
        self.name = name
        self.quantity = quantity
        self.count = count
        self.averagePrice = averagePrice
        self.itemNumber = itemNumber
        self.brand = brand
        self.vendorDescription = vendorDescription
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case name
        case quantity
        case count
        case averagePrice
        case itemNumber
        case brand
        case vendorDescription
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(quantity, forKey: .quantity)
        try container.encodeIfPresent(count, forKey: .count)
        try container.encodeIfPresent(averagePrice, forKey: .averagePrice)
        try container.encodeIfPresent(itemNumber, forKey: .itemNumber)
        try container.encodeIfPresent(brand, forKey: .brand)
        try container.encodeIfPresent(vendorDescription, forKey: .vendorDescription)
    }
}

