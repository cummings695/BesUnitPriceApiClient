//
// CreateInventoryItemCommand.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public final class CreateInventoryItemCommand: Codable, JSONEncodable, Hashable {

    static let nameRule = StringRule(minLength: 1, maxLength: 250, pattern: nil)
    public var baseQuantity: Int?
    public var currentQuantity: Int?
    public var orderAmount: Int?
    public var ownerId: Int64?
    public var zoneId: Int64?
    public var shelvingUnitId: Int64?
    public var shelfNumber: Int?
    public var active: Bool?
    public var name: String
    public var notes: String?
    public var defaultUnitOfMeasureId: Int64?
    public var defaultQuantity: Double?
    public var defaultCount: Double?

    public init(baseQuantity: Int? = nil, currentQuantity: Int? = nil, orderAmount: Int? = nil, ownerId: Int64? = nil, zoneId: Int64? = nil, shelvingUnitId: Int64? = nil, shelfNumber: Int? = nil, active: Bool? = nil, name: String, notes: String? = nil, defaultUnitOfMeasureId: Int64? = nil, defaultQuantity: Double? = nil, defaultCount: Double? = nil) {
        self.baseQuantity = baseQuantity
        self.currentQuantity = currentQuantity
        self.orderAmount = orderAmount
        self.ownerId = ownerId
        self.zoneId = zoneId
        self.shelvingUnitId = shelvingUnitId
        self.shelfNumber = shelfNumber
        self.active = active
        self.name = name
        self.notes = notes
        self.defaultUnitOfMeasureId = defaultUnitOfMeasureId
        self.defaultQuantity = defaultQuantity
        self.defaultCount = defaultCount
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case baseQuantity
        case currentQuantity
        case orderAmount
        case ownerId
        case zoneId
        case shelvingUnitId
        case shelfNumber
        case active
        case name
        case notes
        case defaultUnitOfMeasureId
        case defaultQuantity
        case defaultCount
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(baseQuantity, forKey: .baseQuantity)
        try container.encodeIfPresent(currentQuantity, forKey: .currentQuantity)
        try container.encodeIfPresent(orderAmount, forKey: .orderAmount)
        try container.encodeIfPresent(ownerId, forKey: .ownerId)
        try container.encodeIfPresent(zoneId, forKey: .zoneId)
        try container.encodeIfPresent(shelvingUnitId, forKey: .shelvingUnitId)
        try container.encodeIfPresent(shelfNumber, forKey: .shelfNumber)
        try container.encodeIfPresent(active, forKey: .active)
        try container.encode(name, forKey: .name)
        try container.encodeIfPresent(notes, forKey: .notes)
        try container.encodeIfPresent(defaultUnitOfMeasureId, forKey: .defaultUnitOfMeasureId)
        try container.encodeIfPresent(defaultQuantity, forKey: .defaultQuantity)
        try container.encodeIfPresent(defaultCount, forKey: .defaultCount)
    }

    public static func == (lhs: CreateInventoryItemCommand, rhs: CreateInventoryItemCommand) -> Bool {
        lhs.baseQuantity == rhs.baseQuantity &&
        lhs.currentQuantity == rhs.currentQuantity &&
        lhs.orderAmount == rhs.orderAmount &&
        lhs.ownerId == rhs.ownerId &&
        lhs.zoneId == rhs.zoneId &&
        lhs.shelvingUnitId == rhs.shelvingUnitId &&
        lhs.shelfNumber == rhs.shelfNumber &&
        lhs.active == rhs.active &&
        lhs.name == rhs.name &&
        lhs.notes == rhs.notes &&
        lhs.defaultUnitOfMeasureId == rhs.defaultUnitOfMeasureId &&
        lhs.defaultQuantity == rhs.defaultQuantity &&
        lhs.defaultCount == rhs.defaultCount
        
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(baseQuantity?.hashValue)
        hasher.combine(currentQuantity?.hashValue)
        hasher.combine(orderAmount?.hashValue)
        hasher.combine(ownerId?.hashValue)
        hasher.combine(zoneId?.hashValue)
        hasher.combine(shelvingUnitId?.hashValue)
        hasher.combine(shelfNumber?.hashValue)
        hasher.combine(active?.hashValue)
        hasher.combine(name.hashValue)
        hasher.combine(notes?.hashValue)
        hasher.combine(defaultUnitOfMeasureId?.hashValue)
        hasher.combine(defaultQuantity?.hashValue)
        hasher.combine(defaultCount?.hashValue)
        
    }
}

