//
// GetPagedUnitsQuery.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct GetPagedUnitsQuery: Codable, JSONEncodable, Hashable {

    public var advancedSearch: BaseFilterAdvancedSearch?
    public var keyword: String?
    public var advancedFilter: BaseFilterAdvancedFilter?
    public var page: Int?
    public var pageSize: Int?
    public var orderBy: [String]?
    public var name: String?
    public var sort: String?

    public init(advancedSearch: BaseFilterAdvancedSearch? = nil, keyword: String? = nil, advancedFilter: BaseFilterAdvancedFilter? = nil, page: Int? = nil, pageSize: Int? = nil, orderBy: [String]? = nil, name: String? = nil, sort: String? = nil) {
        self.advancedSearch = advancedSearch
        self.keyword = keyword
        self.advancedFilter = advancedFilter
        self.page = page
        self.pageSize = pageSize
        self.orderBy = orderBy
        self.name = name
        self.sort = sort
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case advancedSearch
        case keyword
        case advancedFilter
        case page
        case pageSize
        case orderBy
        case name
        case sort
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(advancedSearch, forKey: .advancedSearch)
        try container.encodeIfPresent(keyword, forKey: .keyword)
        try container.encodeIfPresent(advancedFilter, forKey: .advancedFilter)
        try container.encodeIfPresent(page, forKey: .page)
        try container.encodeIfPresent(pageSize, forKey: .pageSize)
        try container.encodeIfPresent(orderBy, forKey: .orderBy)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(sort, forKey: .sort)
    }
}

