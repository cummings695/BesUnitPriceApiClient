//
// AuditDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct AuditDto: Codable, JSONEncodable, Hashable {

    public var id: String?
    public var userId: String?
    public var type: String?
    public var tableName: String?
    public var dateTime: Date?
    public var oldValues: String?
    public var newValues: String?
    public var affectedColumns: String?
    public var primaryKey: String?

    public init(id: String? = nil, userId: String? = nil, type: String? = nil, tableName: String? = nil, dateTime: Date? = nil, oldValues: String? = nil, newValues: String? = nil, affectedColumns: String? = nil, primaryKey: String? = nil) {
        self.id = id
        self.userId = userId
        self.type = type
        self.tableName = tableName
        self.dateTime = dateTime
        self.oldValues = oldValues
        self.newValues = newValues
        self.affectedColumns = affectedColumns
        self.primaryKey = primaryKey
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case userId
        case type
        case tableName
        case dateTime
        case oldValues
        case newValues
        case affectedColumns
        case primaryKey
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(userId, forKey: .userId)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(tableName, forKey: .tableName)
        try container.encodeIfPresent(dateTime, forKey: .dateTime)
        try container.encodeIfPresent(oldValues, forKey: .oldValues)
        try container.encodeIfPresent(newValues, forKey: .newValues)
        try container.encodeIfPresent(affectedColumns, forKey: .affectedColumns)
        try container.encodeIfPresent(primaryKey, forKey: .primaryKey)
    }
}

