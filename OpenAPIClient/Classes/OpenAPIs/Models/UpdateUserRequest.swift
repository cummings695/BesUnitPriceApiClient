//
// UpdateUserRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public final class UpdateUserRequest: Codable, JSONEncodable, Hashable {

    static let idRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let firstNameRule = StringRule(minLength: 1, maxLength: 50, pattern: nil)
    static let lastNameRule = StringRule(minLength: 1, maxLength: 50, pattern: nil)
    static let emailRule = StringRule(minLength: 1, maxLength: nil, pattern: "/^[^@]+@[^@]+$/")
    public var id: String
    public var firstName: String
    public var lastName: String
    public var phoneNumber: String?
    public var email: String
    public var configuration: String?
    public var accountNumber: String?
    public var monthlyPrice: Double?
    public var roles: [String]?

    public init(id: String, firstName: String, lastName: String, phoneNumber: String? = nil, email: String, configuration: String? = nil, accountNumber: String? = nil, monthlyPrice: Double? = nil, roles: [String]? = nil) {
        self.id = id
        self.firstName = firstName
        self.lastName = lastName
        self.phoneNumber = phoneNumber
        self.email = email
        self.configuration = configuration
        self.accountNumber = accountNumber
        self.monthlyPrice = monthlyPrice
        self.roles = roles
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case firstName
        case lastName
        case phoneNumber
        case email
        case configuration
        case accountNumber
        case monthlyPrice
        case roles
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(firstName, forKey: .firstName)
        try container.encode(lastName, forKey: .lastName)
        try container.encodeIfPresent(phoneNumber, forKey: .phoneNumber)
        try container.encode(email, forKey: .email)
        try container.encodeIfPresent(configuration, forKey: .configuration)
        try container.encodeIfPresent(accountNumber, forKey: .accountNumber)
        try container.encodeIfPresent(monthlyPrice, forKey: .monthlyPrice)
        try container.encodeIfPresent(roles, forKey: .roles)
    }

    public static func == (lhs: UpdateUserRequest, rhs: UpdateUserRequest) -> Bool {
        lhs.id == rhs.id &&
        lhs.firstName == rhs.firstName &&
        lhs.lastName == rhs.lastName &&
        lhs.phoneNumber == rhs.phoneNumber &&
        lhs.email == rhs.email &&
        lhs.configuration == rhs.configuration &&
        lhs.accountNumber == rhs.accountNumber &&
        lhs.monthlyPrice == rhs.monthlyPrice &&
        lhs.roles == rhs.roles
        
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(id.hashValue)
        hasher.combine(firstName.hashValue)
        hasher.combine(lastName.hashValue)
        hasher.combine(phoneNumber?.hashValue)
        hasher.combine(email.hashValue)
        hasher.combine(configuration?.hashValue)
        hasher.combine(accountNumber?.hashValue)
        hasher.combine(monthlyPrice?.hashValue)
        hasher.combine(roles?.hashValue)
        
    }
}

