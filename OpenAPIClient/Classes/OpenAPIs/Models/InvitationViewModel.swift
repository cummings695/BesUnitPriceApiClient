//
// InvitationViewModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public final class InvitationViewModel: Codable, JSONEncodable, Hashable {

    public var id: String?
    public var restaurantId: Int64?
    public var restaurant: RestaurantViewModel?
    public var email: String?
    public var createdBy: String?
    public var updatedBy: String?
    public var createdDate: Date?
    public var updatedDate: Date?

    public init(id: String? = nil, restaurantId: Int64? = nil, restaurant: RestaurantViewModel? = nil, email: String? = nil, createdBy: String? = nil, updatedBy: String? = nil, createdDate: Date? = nil, updatedDate: Date? = nil) {
        self.id = id
        self.restaurantId = restaurantId
        self.restaurant = restaurant
        self.email = email
        self.createdBy = createdBy
        self.updatedBy = updatedBy
        self.createdDate = createdDate
        self.updatedDate = updatedDate
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case restaurantId
        case restaurant
        case email
        case createdBy
        case updatedBy
        case createdDate
        case updatedDate
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(restaurantId, forKey: .restaurantId)
        try container.encodeIfPresent(restaurant, forKey: .restaurant)
        try container.encodeIfPresent(email, forKey: .email)
        try container.encodeIfPresent(createdBy, forKey: .createdBy)
        try container.encodeIfPresent(updatedBy, forKey: .updatedBy)
        try container.encodeIfPresent(createdDate, forKey: .createdDate)
        try container.encodeIfPresent(updatedDate, forKey: .updatedDate)
    }

    public static func == (lhs: InvitationViewModel, rhs: InvitationViewModel) -> Bool {
        lhs.id == rhs.id &&
        lhs.restaurantId == rhs.restaurantId &&
        lhs.restaurant == rhs.restaurant &&
        lhs.email == rhs.email &&
        lhs.createdBy == rhs.createdBy &&
        lhs.updatedBy == rhs.updatedBy &&
        lhs.createdDate == rhs.createdDate &&
        lhs.updatedDate == rhs.updatedDate
        
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(id?.hashValue)
        hasher.combine(restaurantId?.hashValue)
        hasher.combine(restaurant?.hashValue)
        hasher.combine(email?.hashValue)
        hasher.combine(createdBy?.hashValue)
        hasher.combine(updatedBy?.hashValue)
        hasher.combine(createdDate?.hashValue)
        hasher.combine(updatedDate?.hashValue)
        
    }
}

