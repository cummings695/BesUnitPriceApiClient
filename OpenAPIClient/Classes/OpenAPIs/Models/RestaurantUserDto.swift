//
// RestaurantUserDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct RestaurantUserDto: Codable, JSONEncodable, Hashable {

    public var id: Int64?
    public var owner: Bool?
    public var userId: String?
    public var friendlyName: String?
    public var fullName: String?
    public var userName: String?
    public var firstName: String?
    public var lastName: String?
    public var email: String?
    public var isEnabled: Bool?
    public var phoneNumber: String?
    public var normalizedUserName: String?
    public var normalizedEmail: String?
    public var lockoutEnd: Date?

    public init(id: Int64? = nil, owner: Bool? = nil, userId: String? = nil, friendlyName: String? = nil, fullName: String? = nil, userName: String? = nil, firstName: String? = nil, lastName: String? = nil, email: String? = nil, isEnabled: Bool? = nil, phoneNumber: String? = nil, normalizedUserName: String? = nil, normalizedEmail: String? = nil, lockoutEnd: Date? = nil) {
        self.id = id
        self.owner = owner
        self.userId = userId
        self.friendlyName = friendlyName
        self.fullName = fullName
        self.userName = userName
        self.firstName = firstName
        self.lastName = lastName
        self.email = email
        self.isEnabled = isEnabled
        self.phoneNumber = phoneNumber
        self.normalizedUserName = normalizedUserName
        self.normalizedEmail = normalizedEmail
        self.lockoutEnd = lockoutEnd
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case owner
        case userId
        case friendlyName
        case fullName
        case userName
        case firstName
        case lastName
        case email
        case isEnabled
        case phoneNumber
        case normalizedUserName
        case normalizedEmail
        case lockoutEnd
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(owner, forKey: .owner)
        try container.encodeIfPresent(userId, forKey: .userId)
        try container.encodeIfPresent(friendlyName, forKey: .friendlyName)
        try container.encodeIfPresent(fullName, forKey: .fullName)
        try container.encodeIfPresent(userName, forKey: .userName)
        try container.encodeIfPresent(firstName, forKey: .firstName)
        try container.encodeIfPresent(lastName, forKey: .lastName)
        try container.encodeIfPresent(email, forKey: .email)
        try container.encodeIfPresent(isEnabled, forKey: .isEnabled)
        try container.encodeIfPresent(phoneNumber, forKey: .phoneNumber)
        try container.encodeIfPresent(normalizedUserName, forKey: .normalizedUserName)
        try container.encodeIfPresent(normalizedEmail, forKey: .normalizedEmail)
        try container.encodeIfPresent(lockoutEnd, forKey: .lockoutEnd)
    }
}

