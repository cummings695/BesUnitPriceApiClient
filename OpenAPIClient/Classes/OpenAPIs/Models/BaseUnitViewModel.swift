//
// BaseUnitViewModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public final class BaseUnitViewModel: Codable, JSONEncodable, Hashable {

    static let nameRule = StringRule(minLength: 1, maxLength: 50, pattern: nil)
    static let abbreviationRule = StringRule(minLength: 1, maxLength: 255, pattern: nil)
    public var name: String
    public var abbreviation: String
    public var locked: Bool?

    public init(name: String, abbreviation: String, locked: Bool? = nil) {
        self.name = name
        self.abbreviation = abbreviation
        self.locked = locked
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case abbreviation
        case locked
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(name, forKey: .name)
        try container.encode(abbreviation, forKey: .abbreviation)
        try container.encodeIfPresent(locked, forKey: .locked)
    }

    public static func == (lhs: BaseUnitViewModel, rhs: BaseUnitViewModel) -> Bool {
        lhs.name == rhs.name &&
        lhs.abbreviation == rhs.abbreviation &&
        lhs.locked == rhs.locked
        
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(name.hashValue)
        hasher.combine(abbreviation.hashValue)
        hasher.combine(locked?.hashValue)
        
    }
}

