//
// CreateUserRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public final class CreateUserRequest: Codable, JSONEncodable, Hashable {

    static let firstNameRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let lastNameRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let emailRule = StringRule(minLength: 1, maxLength: nil, pattern: "/^[^@]+@[^@]+$/")
    static let userNameRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let passwordRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    static let confirmPasswordRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    public var firstName: String
    public var lastName: String
    public var email: String
    public var userName: String
    public var password: String
    public var confirmPassword: String
    public var phoneNumber: String?
    public var merchantGatewayId: String?
    public var emailConfirmed: Bool?
    public var isActive: Bool?
    public var selectedRestaurantId: Int64?

    public init(firstName: String, lastName: String, email: String, userName: String, password: String, confirmPassword: String, phoneNumber: String? = nil, merchantGatewayId: String? = nil, emailConfirmed: Bool? = nil, isActive: Bool? = nil, selectedRestaurantId: Int64? = nil) {
        self.firstName = firstName
        self.lastName = lastName
        self.email = email
        self.userName = userName
        self.password = password
        self.confirmPassword = confirmPassword
        self.phoneNumber = phoneNumber
        self.merchantGatewayId = merchantGatewayId
        self.emailConfirmed = emailConfirmed
        self.isActive = isActive
        self.selectedRestaurantId = selectedRestaurantId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case firstName
        case lastName
        case email
        case userName
        case password
        case confirmPassword
        case phoneNumber
        case merchantGatewayId
        case emailConfirmed
        case isActive
        case selectedRestaurantId
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(firstName, forKey: .firstName)
        try container.encode(lastName, forKey: .lastName)
        try container.encode(email, forKey: .email)
        try container.encode(userName, forKey: .userName)
        try container.encode(password, forKey: .password)
        try container.encode(confirmPassword, forKey: .confirmPassword)
        try container.encodeIfPresent(phoneNumber, forKey: .phoneNumber)
        try container.encodeIfPresent(merchantGatewayId, forKey: .merchantGatewayId)
        try container.encodeIfPresent(emailConfirmed, forKey: .emailConfirmed)
        try container.encodeIfPresent(isActive, forKey: .isActive)
        try container.encodeIfPresent(selectedRestaurantId, forKey: .selectedRestaurantId)
    }

    public static func == (lhs: CreateUserRequest, rhs: CreateUserRequest) -> Bool {
        lhs.firstName == rhs.firstName &&
        lhs.lastName == rhs.lastName &&
        lhs.email == rhs.email &&
        lhs.userName == rhs.userName &&
        lhs.password == rhs.password &&
        lhs.confirmPassword == rhs.confirmPassword &&
        lhs.phoneNumber == rhs.phoneNumber &&
        lhs.merchantGatewayId == rhs.merchantGatewayId &&
        lhs.emailConfirmed == rhs.emailConfirmed &&
        lhs.isActive == rhs.isActive &&
        lhs.selectedRestaurantId == rhs.selectedRestaurantId
        
    }

    public func hash(into hasher: inout Hasher) {
        hasher.combine(firstName.hashValue)
        hasher.combine(lastName.hashValue)
        hasher.combine(email.hashValue)
        hasher.combine(userName.hashValue)
        hasher.combine(password.hashValue)
        hasher.combine(confirmPassword.hashValue)
        hasher.combine(phoneNumber?.hashValue)
        hasher.combine(merchantGatewayId?.hashValue)
        hasher.combine(emailConfirmed?.hashValue)
        hasher.combine(isActive?.hashValue)
        hasher.combine(selectedRestaurantId?.hashValue)
        
    }
}

