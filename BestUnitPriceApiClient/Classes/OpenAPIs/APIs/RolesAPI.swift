//
// RolesAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(Combine)
import Combine
#endif
#if canImport(AnyCodable)
import AnyCodable
#endif

open class RolesAPI {

    /**
     Delete a role.
     
     - parameter id: (path)  
     - returns: AnyPublisher<String, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func rolesDelete(id: String) -> AnyPublisher<String, Error> {
        let requestBuilder = rolesDeleteWithRequestBuilder(id: id)
        let requestTask = requestBuilder.requestTask
        return Future<String, Error> { promise in
            requestBuilder.execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Delete a role.
     - DELETE /api/roles/{id}
     - BASIC:
       - type: http
       - name: Bearer
     - parameter id: (path)  
     - returns: RequestBuilder<String> 
     */
    open class func rolesDeleteWithRequestBuilder(id: String) -> RequestBuilder<String> {
        var localVariablePath = "/api/roles/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = BestUnitPriceApiClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = BestUnitPriceApiClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get role details.
     
     - parameter id: (path)  
     - returns: AnyPublisher<RoleDto, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func rolesGetById(id: String) -> AnyPublisher<RoleDto, Error> {
        let requestBuilder = rolesGetByIdWithRequestBuilder(id: id)
        let requestTask = requestBuilder.requestTask
        return Future<RoleDto, Error> { promise in
            requestBuilder.execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Get role details.
     - GET /api/roles/{id}
     - BASIC:
       - type: http
       - name: Bearer
     - parameter id: (path)  
     - returns: RequestBuilder<RoleDto> 
     */
    open class func rolesGetByIdWithRequestBuilder(id: String) -> RequestBuilder<RoleDto> {
        var localVariablePath = "/api/roles/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = BestUnitPriceApiClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RoleDto>.Type = BestUnitPriceApiClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get role details with its permissions.
     
     - parameter id: (path)  
     - returns: AnyPublisher<RoleDto, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func rolesGetByIdWithPermissions(id: String) -> AnyPublisher<RoleDto, Error> {
        let requestBuilder = rolesGetByIdWithPermissionsWithRequestBuilder(id: id)
        let requestTask = requestBuilder.requestTask
        return Future<RoleDto, Error> { promise in
            requestBuilder.execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Get role details with its permissions.
     - GET /api/roles/{id}/permissions
     - BASIC:
       - type: http
       - name: Bearer
     - parameter id: (path)  
     - returns: RequestBuilder<RoleDto> 
     */
    open class func rolesGetByIdWithPermissionsWithRequestBuilder(id: String) -> RequestBuilder<RoleDto> {
        var localVariablePath = "/api/roles/{id}/permissions"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = BestUnitPriceApiClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RoleDto>.Type = BestUnitPriceApiClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get a list of all roles.
     
     - returns: AnyPublisher<[RoleDto], Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func rolesGetList() -> AnyPublisher<[RoleDto], Error> {
        let requestBuilder = rolesGetListWithRequestBuilder()
        let requestTask = requestBuilder.requestTask
        return Future<[RoleDto], Error> { promise in
            requestBuilder.execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Get a list of all roles.
     - GET /api/roles
     - BASIC:
       - type: http
       - name: Bearer
     - returns: RequestBuilder<[RoleDto]> 
     */
    open class func rolesGetListWithRequestBuilder() -> RequestBuilder<[RoleDto]> {
        let localVariablePath = "/api/roles"
        let localVariableURLString = BestUnitPriceApiClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[RoleDto]>.Type = BestUnitPriceApiClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get role details with its permissions.
     
     - returns: AnyPublisher<URL, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func rolesGetPermissions() -> AnyPublisher<URL, Error> {
        let requestBuilder = rolesGetPermissionsWithRequestBuilder()
        let requestTask = requestBuilder.requestTask
        return Future<URL, Error> { promise in
            requestBuilder.execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Get role details with its permissions.
     - GET /api/roles/permissions
     - BASIC:
       - type: http
       - name: Bearer
     - returns: RequestBuilder<URL> 
     */
    open class func rolesGetPermissionsWithRequestBuilder() -> RequestBuilder<URL> {
        let localVariablePath = "/api/roles/permissions"
        let localVariableURLString = BestUnitPriceApiClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<URL>.Type = BestUnitPriceApiClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create or update a role.
     
     - parameter createOrUpdateRoleRequest: (body)  
     - returns: AnyPublisher<String, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func rolesRegisterRole(createOrUpdateRoleRequest: CreateOrUpdateRoleRequest) -> AnyPublisher<String, Error> {
        let requestBuilder = rolesRegisterRoleWithRequestBuilder(createOrUpdateRoleRequest: createOrUpdateRoleRequest)
        let requestTask = requestBuilder.requestTask
        return Future<String, Error> { promise in
            requestBuilder.execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Create or update a role.
     - POST /api/roles
     - BASIC:
       - type: http
       - name: Bearer
     - parameter createOrUpdateRoleRequest: (body)  
     - returns: RequestBuilder<String> 
     */
    open class func rolesRegisterRoleWithRequestBuilder(createOrUpdateRoleRequest: CreateOrUpdateRoleRequest) -> RequestBuilder<String> {
        let localVariablePath = "/api/roles"
        let localVariableURLString = BestUnitPriceApiClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createOrUpdateRoleRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = BestUnitPriceApiClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Update a role's permissions.
     
     - parameter id: (path)  
     - parameter updateRolePermissionsRequest: (body)  
     - returns: AnyPublisher<String, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func rolesUpdatePermissions(id: String, updateRolePermissionsRequest: UpdateRolePermissionsRequest) -> AnyPublisher<String, Error> {
        let requestBuilder = rolesUpdatePermissionsWithRequestBuilder(id: id, updateRolePermissionsRequest: updateRolePermissionsRequest)
        let requestTask = requestBuilder.requestTask
        return Future<String, Error> { promise in
            requestBuilder.execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Update a role's permissions.
     - PUT /api/roles/{id}/permissions
     - BASIC:
       - type: http
       - name: Bearer
     - parameter id: (path)  
     - parameter updateRolePermissionsRequest: (body)  
     - returns: RequestBuilder<String> 
     */
    open class func rolesUpdatePermissionsWithRequestBuilder(id: String, updateRolePermissionsRequest: UpdateRolePermissionsRequest) -> RequestBuilder<String> {
        var localVariablePath = "/api/roles/{id}/permissions"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = BestUnitPriceApiClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateRolePermissionsRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = BestUnitPriceApiClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
