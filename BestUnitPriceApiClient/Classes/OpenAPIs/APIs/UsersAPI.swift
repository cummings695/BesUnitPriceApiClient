//
// UsersAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(Combine)
import Combine
#endif
#if canImport(AnyCodable)
import AnyCodable
#endif

open class UsersAPI {

    /**
     Update a user's assigned roles.
     
     - parameter id: (path)  
     - parameter userRolesRequest: (body)  
     - returns: AnyPublisher<String, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func usersAssignRoles(id: String, userRolesRequest: UserRolesRequest) -> AnyPublisher<String, Error> {
        let requestBuilder = usersAssignRolesWithRequestBuilder(id: id, userRolesRequest: userRolesRequest)
        let requestTask = requestBuilder.requestTask
        return Future<String, Error> { promise in
            requestBuilder.execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Update a user's assigned roles.
     - POST /api/users/{id}/roles
     - BASIC:
       - type: http
       - name: Bearer
     - parameter id: (path)  
     - parameter userRolesRequest: (body)  
     - returns: RequestBuilder<String> 
     */
    open class func usersAssignRolesWithRequestBuilder(id: String, userRolesRequest: UserRolesRequest) -> RequestBuilder<String> {
        var localVariablePath = "/api/users/{id}/roles"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = BestUnitPriceApiClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: userRolesRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = BestUnitPriceApiClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Confirm email address for a user.
     
     - parameter userId: (query)  (optional)
     - parameter code: (query)  (optional)
     - returns: AnyPublisher<String, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func usersConfirmEmail(userId: String? = nil, code: String? = nil) -> AnyPublisher<String, Error> {
        let requestBuilder = usersConfirmEmailWithRequestBuilder(userId: userId, code: code)
        let requestTask = requestBuilder.requestTask
        return Future<String, Error> { promise in
            requestBuilder.execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Confirm email address for a user.
     - GET /api/users/confirm-email
     - parameter userId: (query)  (optional)
     - parameter code: (query)  (optional)
     - returns: RequestBuilder<String> 
     */
    open class func usersConfirmEmailWithRequestBuilder(userId: String? = nil, code: String? = nil) -> RequestBuilder<String> {
        let localVariablePath = "/api/users/confirm-email"
        let localVariableURLString = BestUnitPriceApiClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "userId": (wrappedValue: userId?.encodeToJSON(), isExplode: true),
            "code": (wrappedValue: code?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = BestUnitPriceApiClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Confirm phone number for a user.
     
     - parameter userId: (query)  (optional)
     - parameter code: (query)  (optional)
     - returns: AnyPublisher<String, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func usersConfirmPhoneNumber(userId: String? = nil, code: String? = nil) -> AnyPublisher<String, Error> {
        let requestBuilder = usersConfirmPhoneNumberWithRequestBuilder(userId: userId, code: code)
        let requestTask = requestBuilder.requestTask
        return Future<String, Error> { promise in
            requestBuilder.execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Confirm phone number for a user.
     - GET /api/users/confirm-phone-number
     - parameter userId: (query)  (optional)
     - parameter code: (query)  (optional)
     - returns: RequestBuilder<String> 
     */
    open class func usersConfirmPhoneNumberWithRequestBuilder(userId: String? = nil, code: String? = nil) -> RequestBuilder<String> {
        let localVariablePath = "/api/users/confirm-phone-number"
        let localVariableURLString = BestUnitPriceApiClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "userId": (wrappedValue: userId?.encodeToJSON(), isExplode: true),
            "code": (wrappedValue: code?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = BestUnitPriceApiClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Creates a new user.
     
     - parameter createUserRequest: (body)  
     - returns: AnyPublisher<String, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func usersCreate(createUserRequest: CreateUserRequest) -> AnyPublisher<String, Error> {
        let requestBuilder = usersCreateWithRequestBuilder(createUserRequest: createUserRequest)
        let requestTask = requestBuilder.requestTask
        return Future<String, Error> { promise in
            requestBuilder.execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Creates a new user.
     - POST /api/users
     - BASIC:
       - type: http
       - name: Bearer
     - parameter createUserRequest: (body)  
     - returns: RequestBuilder<String> 
     */
    open class func usersCreateWithRequestBuilder(createUserRequest: CreateUserRequest) -> RequestBuilder<String> {
        let localVariablePath = "/api/users"
        let localVariableURLString = BestUnitPriceApiClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createUserRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = BestUnitPriceApiClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Request a password reset email for a user.
     
     - parameter forgotPasswordRequest: (body)  
     - returns: AnyPublisher<String, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func usersForgotPassword(forgotPasswordRequest: ForgotPasswordRequest) -> AnyPublisher<String, Error> {
        let requestBuilder = usersForgotPasswordWithRequestBuilder(forgotPasswordRequest: forgotPasswordRequest)
        let requestTask = requestBuilder.requestTask
        return Future<String, Error> { promise in
            requestBuilder.execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Request a password reset email for a user.
     - POST /api/users/forgot-password
     - parameter forgotPasswordRequest: (body)  
     - returns: RequestBuilder<String> 
     */
    open class func usersForgotPasswordWithRequestBuilder(forgotPasswordRequest: ForgotPasswordRequest) -> RequestBuilder<String> {
        let localVariablePath = "/api/users/forgot-password"
        let localVariableURLString = BestUnitPriceApiClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: forgotPasswordRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = BestUnitPriceApiClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get a user's details.
     
     - parameter id: (path)  
     - returns: AnyPublisher<UserDetailsDto, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func usersGetById(id: String) -> AnyPublisher<UserDetailsDto, Error> {
        let requestBuilder = usersGetByIdWithRequestBuilder(id: id)
        let requestTask = requestBuilder.requestTask
        return Future<UserDetailsDto, Error> { promise in
            requestBuilder.execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Get a user's details.
     - GET /api/users/{id}
     - BASIC:
       - type: http
       - name: Bearer
     - parameter id: (path)  
     - returns: RequestBuilder<UserDetailsDto> 
     */
    open class func usersGetByIdWithRequestBuilder(id: String) -> RequestBuilder<UserDetailsDto> {
        var localVariablePath = "/api/users/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = BestUnitPriceApiClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserDetailsDto>.Type = BestUnitPriceApiClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get list of all users.
     
     - returns: AnyPublisher<[UserDetailsDto], Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func usersGetList() -> AnyPublisher<[UserDetailsDto], Error> {
        let requestBuilder = usersGetListWithRequestBuilder()
        let requestTask = requestBuilder.requestTask
        return Future<[UserDetailsDto], Error> { promise in
            requestBuilder.execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Get list of all users.
     - GET /api/users
     - BASIC:
       - type: http
       - name: Bearer
     - returns: RequestBuilder<[UserDetailsDto]> 
     */
    open class func usersGetListWithRequestBuilder() -> RequestBuilder<[UserDetailsDto]> {
        let localVariablePath = "/api/users"
        let localVariableURLString = BestUnitPriceApiClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UserDetailsDto]>.Type = BestUnitPriceApiClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get a user's roles.
     
     - parameter id: (path)  
     - returns: AnyPublisher<[UserRoleDto], Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func usersGetRoles(id: String) -> AnyPublisher<[UserRoleDto], Error> {
        let requestBuilder = usersGetRolesWithRequestBuilder(id: id)
        let requestTask = requestBuilder.requestTask
        return Future<[UserRoleDto], Error> { promise in
            requestBuilder.execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Get a user's roles.
     - GET /api/users/{id}/roles
     - BASIC:
       - type: http
       - name: Bearer
     - parameter id: (path)  
     - returns: RequestBuilder<[UserRoleDto]> 
     */
    open class func usersGetRolesWithRequestBuilder(id: String) -> RequestBuilder<[UserRoleDto]> {
        var localVariablePath = "/api/users/{id}/roles"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = BestUnitPriceApiClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[UserRoleDto]>.Type = BestUnitPriceApiClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Reset a user's password.
     
     - parameter resetPasswordRequest: (body)  
     - returns: AnyPublisher<String, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func usersResetPassword(resetPasswordRequest: ResetPasswordRequest) -> AnyPublisher<String, Error> {
        let requestBuilder = usersResetPasswordWithRequestBuilder(resetPasswordRequest: resetPasswordRequest)
        let requestTask = requestBuilder.requestTask
        return Future<String, Error> { promise in
            requestBuilder.execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Reset a user's password.
     - POST /api/users/reset-password
     - BASIC:
       - type: http
       - name: Bearer
     - parameter resetPasswordRequest: (body)  
     - returns: RequestBuilder<String> 
     */
    open class func usersResetPasswordWithRequestBuilder(resetPasswordRequest: ResetPasswordRequest) -> RequestBuilder<String> {
        let localVariablePath = "/api/users/reset-password"
        let localVariableURLString = BestUnitPriceApiClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: resetPasswordRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = BestUnitPriceApiClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Anonymous user creates a user.
     
     - parameter createUserRequest: (body)  
     - returns: AnyPublisher<String, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func usersSelfRegister(createUserRequest: CreateUserRequest) -> AnyPublisher<String, Error> {
        let requestBuilder = usersSelfRegisterWithRequestBuilder(createUserRequest: createUserRequest)
        let requestTask = requestBuilder.requestTask
        return Future<String, Error> { promise in
            requestBuilder.execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Anonymous user creates a user.
     - POST /api/users/self-register
     - parameter createUserRequest: (body)  
     - returns: RequestBuilder<String> 
     */
    open class func usersSelfRegisterWithRequestBuilder(createUserRequest: CreateUserRequest) -> RequestBuilder<String> {
        let localVariablePath = "/api/users/self-register"
        let localVariableURLString = BestUnitPriceApiClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createUserRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = BestUnitPriceApiClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Toggle a user's active status.
     
     - parameter id: (path)  
     - parameter toggleUserStatusRequest: (body)  
     - returns: AnyPublisher<Void, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func usersToggleStatus(id: String, toggleUserStatusRequest: ToggleUserStatusRequest) -> AnyPublisher<Void, Error> {
        let requestBuilder = usersToggleStatusWithRequestBuilder(id: id, toggleUserStatusRequest: toggleUserStatusRequest)
        let requestTask = requestBuilder.requestTask
        return Future<Void, Error> { promise in
            requestBuilder.execute { result in
                switch result {
                case .success:
                    promise(.success(()))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Toggle a user's active status.
     - POST /api/users/{id}/toggle-status
     - BASIC:
       - type: http
       - name: Bearer
     - parameter id: (path)  
     - parameter toggleUserStatusRequest: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func usersToggleStatusWithRequestBuilder(id: String, toggleUserStatusRequest: ToggleUserStatusRequest) -> RequestBuilder<Void> {
        var localVariablePath = "/api/users/{id}/toggle-status"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = BestUnitPriceApiClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: toggleUserStatusRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = BestUnitPriceApiClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Updates a user.
     
     - parameter id: (path)  
     - parameter updateUserRequest: (body)  
     - returns: AnyPublisher<Void, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func usersUpdate(id: String, updateUserRequest: UpdateUserRequest) -> AnyPublisher<Void, Error> {
        let requestBuilder = usersUpdateWithRequestBuilder(id: id, updateUserRequest: updateUserRequest)
        let requestTask = requestBuilder.requestTask
        return Future<Void, Error> { promise in
            requestBuilder.execute { result in
                switch result {
                case .success:
                    promise(.success(()))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Updates a user.
     - PUT /api/users/{id}
     - BASIC:
       - type: http
       - name: Bearer
     - parameter id: (path)  
     - parameter updateUserRequest: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func usersUpdateWithRequestBuilder(id: String, updateUserRequest: UpdateUserRequest) -> RequestBuilder<Void> {
        var localVariablePath = "/api/users/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = BestUnitPriceApiClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateUserRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = BestUnitPriceApiClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
