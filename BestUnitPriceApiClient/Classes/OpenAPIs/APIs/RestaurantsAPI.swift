//
// RestaurantsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(Combine)
import Combine
#endif
#if canImport(AnyCodable)
import AnyCodable
#endif

open class RestaurantsAPI {

    /**

     - parameter addProductToRestaurantCommand: (body)  
     - returns: AnyPublisher<Void, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func restaurantsAddProductToRestaurant(addProductToRestaurantCommand: AddProductToRestaurantCommand) -> AnyPublisher<Void, Error> {
        let requestBuilder = restaurantsAddProductToRestaurantWithRequestBuilder(addProductToRestaurantCommand: addProductToRestaurantCommand)
        let requestTask = requestBuilder.requestTask
        return Future<Void, Error> { promise in
            requestBuilder.execute { result in
                switch result {
                case .success:
                    promise(.success(()))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     - POST /api/restaurants/current/product
     - BASIC:
       - type: http
       - name: Bearer
     - parameter addProductToRestaurantCommand: (body)  
     - returns: RequestBuilder<Void> 
     */
    open class func restaurantsAddProductToRestaurantWithRequestBuilder(addProductToRestaurantCommand: AddProductToRestaurantCommand) -> RequestBuilder<Void> {
        let localVariablePath = "/api/restaurants/current/product"
        let localVariableURLString = BestUnitPriceApiClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: addProductToRestaurantCommand)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = BestUnitPriceApiClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path)  
     - returns: AnyPublisher<URL, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func restaurantsDelete(id: Int) -> AnyPublisher<URL, Error> {
        let requestBuilder = restaurantsDeleteWithRequestBuilder(id: id)
        let requestTask = requestBuilder.requestTask
        return Future<URL, Error> { promise in
            requestBuilder.execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     - DELETE /api/restaurants/{id}
     - BASIC:
       - type: http
       - name: Bearer
     - parameter id: (path)  
     - returns: RequestBuilder<URL> 
     */
    open class func restaurantsDeleteWithRequestBuilder(id: Int) -> RequestBuilder<URL> {
        var localVariablePath = "/api/restaurants/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = BestUnitPriceApiClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<URL>.Type = BestUnitPriceApiClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path)  
     - returns: AnyPublisher<RestaurantViewModel, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func restaurantsGet(id: Int) -> AnyPublisher<RestaurantViewModel, Error> {
        let requestBuilder = restaurantsGetWithRequestBuilder(id: id)
        let requestTask = requestBuilder.requestTask
        return Future<RestaurantViewModel, Error> { promise in
            requestBuilder.execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     - GET /api/restaurants/{id}
     - BASIC:
       - type: http
       - name: Bearer
     - parameter id: (path)  
     - returns: RequestBuilder<RestaurantViewModel> 
     */
    open class func restaurantsGetWithRequestBuilder(id: Int) -> RequestBuilder<RestaurantViewModel> {
        var localVariablePath = "/api/restaurants/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = BestUnitPriceApiClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RestaurantViewModel>.Type = BestUnitPriceApiClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - returns: AnyPublisher<[RestaurantDto], Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func restaurantsGetAll() -> AnyPublisher<[RestaurantDto], Error> {
        let requestBuilder = restaurantsGetAllWithRequestBuilder()
        let requestTask = requestBuilder.requestTask
        return Future<[RestaurantDto], Error> { promise in
            requestBuilder.execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     - GET /api/restaurants
     - BASIC:
       - type: http
       - name: Bearer
     - returns: RequestBuilder<[RestaurantDto]> 
     */
    open class func restaurantsGetAllWithRequestBuilder() -> RequestBuilder<[RestaurantDto]> {
        let localVariablePath = "/api/restaurants"
        let localVariableURLString = BestUnitPriceApiClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[RestaurantDto]>.Type = BestUnitPriceApiClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - returns: AnyPublisher<URL, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func restaurantsGetCurrentUserRestaurants() -> AnyPublisher<URL, Error> {
        let requestBuilder = restaurantsGetCurrentUserRestaurantsWithRequestBuilder()
        let requestTask = requestBuilder.requestTask
        return Future<URL, Error> { promise in
            requestBuilder.execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     - GET /api/restaurants/mine
     - BASIC:
       - type: http
       - name: Bearer
     - returns: RequestBuilder<URL> 
     */
    open class func restaurantsGetCurrentUserRestaurantsWithRequestBuilder() -> RequestBuilder<URL> {
        let localVariablePath = "/api/restaurants/mine"
        let localVariableURLString = BestUnitPriceApiClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<URL>.Type = BestUnitPriceApiClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter id: (path)  
     - parameter seedRestaurantCommand: (body)  
     - returns: AnyPublisher<URL, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func restaurantsImport(id: Int, seedRestaurantCommand: SeedRestaurantCommand) -> AnyPublisher<URL, Error> {
        let requestBuilder = restaurantsImportWithRequestBuilder(id: id, seedRestaurantCommand: seedRestaurantCommand)
        let requestTask = requestBuilder.requestTask
        return Future<URL, Error> { promise in
            requestBuilder.execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     - PUT /api/restaurants/{id}/import
     - BASIC:
       - type: http
       - name: Bearer
     - parameter id: (path)  
     - parameter seedRestaurantCommand: (body)  
     - returns: RequestBuilder<URL> 
     */
    open class func restaurantsImportWithRequestBuilder(id: Int, seedRestaurantCommand: SeedRestaurantCommand) -> RequestBuilder<URL> {
        var localVariablePath = "/api/restaurants/{id}/import"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = BestUnitPriceApiClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: seedRestaurantCommand)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<URL>.Type = BestUnitPriceApiClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter createRestaurantCommand: (body)  
     - returns: AnyPublisher<URL, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func restaurantsPost(createRestaurantCommand: CreateRestaurantCommand) -> AnyPublisher<URL, Error> {
        let requestBuilder = restaurantsPostWithRequestBuilder(createRestaurantCommand: createRestaurantCommand)
        let requestTask = requestBuilder.requestTask
        return Future<URL, Error> { promise in
            requestBuilder.execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     - POST /api/restaurants
     - BASIC:
       - type: http
       - name: Bearer
     - parameter createRestaurantCommand: (body)  
     - returns: RequestBuilder<URL> 
     */
    open class func restaurantsPostWithRequestBuilder(createRestaurantCommand: CreateRestaurantCommand) -> RequestBuilder<URL> {
        let localVariablePath = "/api/restaurants"
        let localVariableURLString = BestUnitPriceApiClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createRestaurantCommand)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<URL>.Type = BestUnitPriceApiClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Update a restaurant
     
     - parameter id: (path)  
     - parameter updateRestaurantCommand: (body)  
     - returns: AnyPublisher<URL, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func restaurantsPut(id: Int, updateRestaurantCommand: UpdateRestaurantCommand) -> AnyPublisher<URL, Error> {
        let requestBuilder = restaurantsPutWithRequestBuilder(id: id, updateRestaurantCommand: updateRestaurantCommand)
        let requestTask = requestBuilder.requestTask
        return Future<URL, Error> { promise in
            requestBuilder.execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Update a restaurant
     - PUT /api/restaurants/{id}
     - BASIC:
       - type: http
       - name: Bearer
     - parameter id: (path)  
     - parameter updateRestaurantCommand: (body)  
     - returns: RequestBuilder<URL> 
     */
    open class func restaurantsPutWithRequestBuilder(id: Int, updateRestaurantCommand: UpdateRestaurantCommand) -> RequestBuilder<URL> {
        var localVariablePath = "/api/restaurants/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = BestUnitPriceApiClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateRestaurantCommand)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<URL>.Type = BestUnitPriceApiClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
