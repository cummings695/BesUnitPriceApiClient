//
// TokensAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(Combine)
import Combine
#endif
#if canImport(AnyCodable)
import AnyCodable
#endif

open class TokensAPI {

    /**
     Request an access token using credentials.
     
     - parameter tokenRequest: (body)  
     - returns: AnyPublisher<TokenResponse, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func tokensGetToken(tokenRequest: TokenRequest) -> AnyPublisher<TokenResponse, Error> {
        let requestBuilder = tokensGetTokenWithRequestBuilder(tokenRequest: tokenRequest)
        let requestTask = requestBuilder.requestTask
        return Future<TokenResponse, Error> { promise in
            requestBuilder.execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Request an access token using credentials.
     - POST /api/tokens
     - parameter tokenRequest: (body)  
     - returns: RequestBuilder<TokenResponse> 
     */
    open class func tokensGetTokenWithRequestBuilder(tokenRequest: TokenRequest) -> RequestBuilder<TokenResponse> {
        let localVariablePath = "/api/tokens"
        let localVariableURLString = BestUnitPriceApiClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: tokenRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TokenResponse>.Type = BestUnitPriceApiClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Request an access token using a refresh token.
     
     - parameter refreshTokenRequest: (body)  
     - returns: AnyPublisher<TokenResponse, Error>
     */
    #if canImport(Combine)
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func tokensRefresh(refreshTokenRequest: RefreshTokenRequest) -> AnyPublisher<TokenResponse, Error> {
        let requestBuilder = tokensRefreshWithRequestBuilder(refreshTokenRequest: refreshTokenRequest)
        let requestTask = requestBuilder.requestTask
        return Future<TokenResponse, Error> { promise in
            requestBuilder.execute { result in
                switch result {
                case let .success(response):
                    promise(.success(response.body))
                case let .failure(error):
                    promise(.failure(error))
                }
            }
        }
        .handleEvents(receiveCancel: {
            requestTask.cancel()
        })
        .eraseToAnyPublisher()
    }
    #endif

    /**
     Request an access token using a refresh token.
     - POST /api/tokens/refresh
     - parameter refreshTokenRequest: (body)  
     - returns: RequestBuilder<TokenResponse> 
     */
    open class func tokensRefreshWithRequestBuilder(refreshTokenRequest: RefreshTokenRequest) -> RequestBuilder<TokenResponse> {
        let localVariablePath = "/api/tokens/refresh"
        let localVariableURLString = BestUnitPriceApiClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: refreshTokenRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TokenResponse>.Type = BestUnitPriceApiClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
