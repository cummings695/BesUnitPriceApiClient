//
// BatchViewModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct BatchViewModel: Codable, JSONEncodable, Hashable {

    public var id: Int64?
    public var number: String?
    public var orders: [OrderViewModel]?
    public var owner: BatchViewModelOwner?
    public var status: BatchStatus?
    public var deactivatedVendors: [VendorViewModel]?
    public var costSavings: BatchViewModelCostSavings?
    public var active: Bool?
    public var orderDate: Date?
    public var createDate: Date?

    public init(id: Int64? = nil, number: String? = nil, orders: [OrderViewModel]? = nil, owner: BatchViewModelOwner? = nil, status: BatchStatus? = nil, deactivatedVendors: [VendorViewModel]? = nil, costSavings: BatchViewModelCostSavings? = nil, active: Bool? = nil, orderDate: Date? = nil, createDate: Date? = nil) {
        self.id = id
        self.number = number
        self.orders = orders
        self.owner = owner
        self.status = status
        self.deactivatedVendors = deactivatedVendors
        self.costSavings = costSavings
        self.active = active
        self.orderDate = orderDate
        self.createDate = createDate
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case number
        case orders
        case owner
        case status
        case deactivatedVendors
        case costSavings
        case active
        case orderDate
        case createDate
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(number, forKey: .number)
        try container.encodeIfPresent(orders, forKey: .orders)
        try container.encodeIfPresent(owner, forKey: .owner)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(deactivatedVendors, forKey: .deactivatedVendors)
        try container.encodeIfPresent(costSavings, forKey: .costSavings)
        try container.encodeIfPresent(active, forKey: .active)
        try container.encodeIfPresent(orderDate, forKey: .orderDate)
        try container.encodeIfPresent(createDate, forKey: .createDate)
    }
}

