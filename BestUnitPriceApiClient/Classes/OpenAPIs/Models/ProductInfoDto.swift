//
// ProductInfoDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ProductInfoDto: Codable, JSONEncodable, Hashable {

    public var id: Int64?
    public var orderCode: String?
    public var brand: String?
    public var quantity: Double?
    public var description: String?
    public var vendorDescription: String?
    public var count: Double?
    public var unitOfMeasureId: Int64?
    public var unitOfMeasure: ProductInfoDtoUnitOfMeasure?
    public var deselected: Bool?
    public var price: Double?
    public var unitPrice: Double?
    public var isPreferred: Bool?
    public var manufacturerCode: String?
    public var lastModifiedOn: Date?

    public init(id: Int64? = nil, orderCode: String? = nil, brand: String? = nil, quantity: Double? = nil, description: String? = nil, vendorDescription: String? = nil, count: Double? = nil, unitOfMeasureId: Int64? = nil, unitOfMeasure: ProductInfoDtoUnitOfMeasure? = nil, deselected: Bool? = nil, price: Double? = nil, unitPrice: Double? = nil, isPreferred: Bool? = nil, manufacturerCode: String? = nil, lastModifiedOn: Date? = nil) {
        self.id = id
        self.orderCode = orderCode
        self.brand = brand
        self.quantity = quantity
        self.description = description
        self.vendorDescription = vendorDescription
        self.count = count
        self.unitOfMeasureId = unitOfMeasureId
        self.unitOfMeasure = unitOfMeasure
        self.deselected = deselected
        self.price = price
        self.unitPrice = unitPrice
        self.isPreferred = isPreferred
        self.manufacturerCode = manufacturerCode
        self.lastModifiedOn = lastModifiedOn
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case orderCode
        case brand
        case quantity
        case description
        case vendorDescription
        case count
        case unitOfMeasureId
        case unitOfMeasure
        case deselected
        case price
        case unitPrice
        case isPreferred
        case manufacturerCode
        case lastModifiedOn
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(orderCode, forKey: .orderCode)
        try container.encodeIfPresent(brand, forKey: .brand)
        try container.encodeIfPresent(quantity, forKey: .quantity)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(vendorDescription, forKey: .vendorDescription)
        try container.encodeIfPresent(count, forKey: .count)
        try container.encodeIfPresent(unitOfMeasureId, forKey: .unitOfMeasureId)
        try container.encodeIfPresent(unitOfMeasure, forKey: .unitOfMeasure)
        try container.encodeIfPresent(deselected, forKey: .deselected)
        try container.encodeIfPresent(price, forKey: .price)
        try container.encodeIfPresent(unitPrice, forKey: .unitPrice)
        try container.encodeIfPresent(isPreferred, forKey: .isPreferred)
        try container.encodeIfPresent(manufacturerCode, forKey: .manufacturerCode)
        try container.encodeIfPresent(lastModifiedOn, forKey: .lastModifiedOn)
    }
}

