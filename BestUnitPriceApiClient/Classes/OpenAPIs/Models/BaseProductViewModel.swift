//
// BaseProductViewModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct BaseProductViewModel: Codable, JSONEncodable, Hashable {

    public var name: String?
    public var notes: String?
    public var prices: [ProductPriceViewModel]?
    public var defaultUnitOfMeasureId: Int64?
    public var defaultUnitOfMeasure: UnitViewModel?
    public var defaultQuantity: Float?
    public var defaultCount: Float?

    public init(name: String? = nil, notes: String? = nil, prices: [ProductPriceViewModel]? = nil, defaultUnitOfMeasureId: Int64? = nil, defaultUnitOfMeasure: UnitViewModel? = nil, defaultQuantity: Float? = nil, defaultCount: Float? = nil) {
        self.name = name
        self.notes = notes
        self.prices = prices
        self.defaultUnitOfMeasureId = defaultUnitOfMeasureId
        self.defaultUnitOfMeasure = defaultUnitOfMeasure
        self.defaultQuantity = defaultQuantity
        self.defaultCount = defaultCount
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case notes
        case prices
        case defaultUnitOfMeasureId
        case defaultUnitOfMeasure
        case defaultQuantity
        case defaultCount
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(notes, forKey: .notes)
        try container.encodeIfPresent(prices, forKey: .prices)
        try container.encodeIfPresent(defaultUnitOfMeasureId, forKey: .defaultUnitOfMeasureId)
        try container.encodeIfPresent(defaultUnitOfMeasure, forKey: .defaultUnitOfMeasure)
        try container.encodeIfPresent(defaultQuantity, forKey: .defaultQuantity)
        try container.encodeIfPresent(defaultCount, forKey: .defaultCount)
    }
}

