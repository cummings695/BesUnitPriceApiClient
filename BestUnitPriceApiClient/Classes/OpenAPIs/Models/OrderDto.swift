//
// OrderDto.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct OrderDto: Codable, JSONEncodable, Hashable {

    public var id: Int64?
    public var createdDate: Date?
    public var totalPrice: Float?
    public var estimatedPrice: Float?
    public var items: [OrderItemDto]?
    public var itemsCount: Int?
    public var vendorId: Int64?
    public var vendor: OrderDtoVendor?
    public var active: Bool?
    public var statusId: Int64?
    public var status: OrderStatus?
    public var batchId: Int64?
    public var invoice: String?
    public var deliveryDate: Date?
    public var orderDate: Date?
    public var number: String?

    public init(id: Int64? = nil, createdDate: Date? = nil, totalPrice: Float? = nil, estimatedPrice: Float? = nil, items: [OrderItemDto]? = nil, itemsCount: Int? = nil, vendorId: Int64? = nil, vendor: OrderDtoVendor? = nil, active: Bool? = nil, statusId: Int64? = nil, status: OrderStatus? = nil, batchId: Int64? = nil, invoice: String? = nil, deliveryDate: Date? = nil, orderDate: Date? = nil, number: String? = nil) {
        self.id = id
        self.createdDate = createdDate
        self.totalPrice = totalPrice
        self.estimatedPrice = estimatedPrice
        self.items = items
        self.itemsCount = itemsCount
        self.vendorId = vendorId
        self.vendor = vendor
        self.active = active
        self.statusId = statusId
        self.status = status
        self.batchId = batchId
        self.invoice = invoice
        self.deliveryDate = deliveryDate
        self.orderDate = orderDate
        self.number = number
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case createdDate
        case totalPrice
        case estimatedPrice
        case items
        case itemsCount
        case vendorId
        case vendor
        case active
        case statusId
        case status
        case batchId
        case invoice
        case deliveryDate
        case orderDate
        case number
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(createdDate, forKey: .createdDate)
        try container.encodeIfPresent(totalPrice, forKey: .totalPrice)
        try container.encodeIfPresent(estimatedPrice, forKey: .estimatedPrice)
        try container.encodeIfPresent(items, forKey: .items)
        try container.encodeIfPresent(itemsCount, forKey: .itemsCount)
        try container.encodeIfPresent(vendorId, forKey: .vendorId)
        try container.encodeIfPresent(vendor, forKey: .vendor)
        try container.encodeIfPresent(active, forKey: .active)
        try container.encodeIfPresent(statusId, forKey: .statusId)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(batchId, forKey: .batchId)
        try container.encodeIfPresent(invoice, forKey: .invoice)
        try container.encodeIfPresent(deliveryDate, forKey: .deliveryDate)
        try container.encodeIfPresent(orderDate, forKey: .orderDate)
        try container.encodeIfPresent(number, forKey: .number)
    }
}

