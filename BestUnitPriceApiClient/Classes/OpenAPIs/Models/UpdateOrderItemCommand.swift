//
// UpdateOrderItemCommand.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct UpdateOrderItemCommand: Codable, JSONEncodable, Hashable {

    public var orderId: Int64?
    public var orderItemId: Int64?
    public var receivedQuantity: Int?
    public var orderCode: String?
    public var receivedPrice: Double?
    public var receivedUnitPrice: Double?
    public var received: Bool?

    public init(orderId: Int64? = nil, orderItemId: Int64? = nil, receivedQuantity: Int? = nil, orderCode: String? = nil, receivedPrice: Double? = nil, receivedUnitPrice: Double? = nil, received: Bool? = nil) {
        self.orderId = orderId
        self.orderItemId = orderItemId
        self.receivedQuantity = receivedQuantity
        self.orderCode = orderCode
        self.receivedPrice = receivedPrice
        self.receivedUnitPrice = receivedUnitPrice
        self.received = received
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case orderId
        case orderItemId
        case receivedQuantity
        case orderCode
        case receivedPrice
        case receivedUnitPrice
        case received
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(orderId, forKey: .orderId)
        try container.encodeIfPresent(orderItemId, forKey: .orderItemId)
        try container.encodeIfPresent(receivedQuantity, forKey: .receivedQuantity)
        try container.encodeIfPresent(orderCode, forKey: .orderCode)
        try container.encodeIfPresent(receivedPrice, forKey: .receivedPrice)
        try container.encodeIfPresent(receivedUnitPrice, forKey: .receivedUnitPrice)
        try container.encodeIfPresent(received, forKey: .received)
    }
}

